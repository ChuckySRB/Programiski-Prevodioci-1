INFO  06:12:41,178 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:12:41,546 - #2 program
INFO  06:12:41,548 - #19 test302
INFO  06:12:41,548 - #15 const
INFO  06:12:41,548 - #19 int
INFO  06:12:41,549 - #19 jedan
INFO  06:12:41,560 - #21 =
INFO  06:12:41,561 - #16 1
INFO  06:12:41,565 - #23 ;
INFO  06:12:41,576 - #19 int
INFO  06:12:41,580 - #19 i
INFO  06:12:41,581 - #23 ;
INFO  06:12:41,584 - #19 bool
INFO  06:12:41,587 - #19 ibool
INFO  06:12:41,588 - #23 ;
INFO  06:12:41,588 - #19 int
INFO  06:12:41,588 - #19 niz2
INFO  06:12:41,589 - #23 ;
INFO  06:12:41,589 - #19 int
INFO  06:12:41,590 - #19 niz
INFO  06:12:41,590 - #28 [
INFO  06:12:41,590 - #29 ]
INFO  06:12:41,591 - #23 ;
INFO  06:12:41,591 - #19 int
INFO  06:12:41,591 - #19 a
INFO  06:12:41,591 - #22 ,
INFO  06:12:41,591 - #19 curr
INFO  06:12:41,591 - #23 ;
INFO  06:12:41,591 - #26 {
INFO  06:12:41,593 - #19 int
INFO  06:12:41,593 - #19 sum
INFO  06:12:41,593 - #24 (
INFO  06:12:41,593 - #19 int
INFO  06:12:41,593 - #19 z
INFO  06:12:41,593 - #22 ,
INFO  06:12:41,595 - #19 int
INFO  06:12:41,595 - #19 d
INFO  06:12:41,595 - #25 )
INFO  06:12:41,596 - #26 {
INFO  06:12:41,596 - #4 return
INFO  06:12:41,597 - #19 z
INFO  06:12:41,597 - #20 +
INFO  06:12:41,597 - #19 d
INFO  06:12:41,599 - #23 ;
INFO  06:12:41,599 - #27 }
INFO  06:12:41,600 - #19 int
INFO  06:12:41,600 - #19 inkrement
INFO  06:12:41,600 - #24 (
INFO  06:12:41,600 - #19 int
INFO  06:12:41,600 - #19 a
INFO  06:12:41,601 - #22 ,
INFO  06:12:41,601 - #19 int
INFO  06:12:41,601 - #19 inc
INFO  06:12:41,601 - #25 )
INFO  06:12:41,601 - #19 int
INFO  06:12:41,601 - #19 pom
INFO  06:12:41,601 - #23 ;
INFO  06:12:41,601 - #26 {
INFO  06:12:41,601 - #8 if
INFO  06:12:41,601 - #24 (
INFO  06:12:41,602 - #19 inc
INFO  06:12:41,602 - #39 ==
INFO  06:12:41,602 - #19 jedan
INFO  06:12:41,603 - #25 )
INFO  06:12:41,627 - #19 pom
INFO  06:12:41,629 - #21 =
INFO  06:12:41,629 - #16 1
INFO  06:12:41,629 - #23 ;
INFO  06:12:41,632 - #9 else
ERROR 06:12:41,632 - 
Sintaksna greska na liniji 27
ERROR 06:12:41,641 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 27
INFO  06:14:12,615 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:14:12,771 - #2 program
INFO  06:14:12,771 - #19 test302
INFO  06:14:12,772 - #15 const
INFO  06:14:12,772 - #19 int
INFO  06:14:12,772 - #19 jedan
INFO  06:14:12,776 - #21 =
INFO  06:14:12,776 - #16 1
INFO  06:14:12,781 - #23 ;
INFO  06:14:12,789 - #19 int
INFO  06:14:12,801 - #19 i
INFO  06:14:12,801 - #23 ;
INFO  06:14:12,805 - #19 bool
INFO  06:14:12,806 - #19 ibool
INFO  06:14:12,806 - #23 ;
INFO  06:14:12,807 - #19 int
INFO  06:14:12,807 - #19 niz2
INFO  06:14:12,807 - #23 ;
INFO  06:14:12,808 - #19 int
INFO  06:14:12,808 - #19 niz
INFO  06:14:12,808 - #28 [
INFO  06:14:12,808 - #29 ]
INFO  06:14:12,808 - #23 ;
INFO  06:14:12,809 - #19 int
INFO  06:14:12,809 - #19 a
INFO  06:14:12,809 - #22 ,
INFO  06:14:12,809 - #19 curr
INFO  06:14:12,809 - #23 ;
INFO  06:14:12,810 - #26 {
INFO  06:14:12,812 - #19 int
INFO  06:14:12,812 - #19 sum
INFO  06:14:12,812 - #24 (
INFO  06:14:12,812 - #19 int
INFO  06:14:12,813 - #19 z
INFO  06:14:12,813 - #22 ,
INFO  06:14:12,815 - #19 int
INFO  06:14:12,815 - #19 d
INFO  06:14:12,815 - #25 )
INFO  06:14:12,816 - #26 {
INFO  06:14:12,816 - #4 return
INFO  06:14:12,816 - #19 z
INFO  06:14:12,816 - #20 +
INFO  06:14:12,817 - #19 d
INFO  06:14:12,818 - #23 ;
INFO  06:14:12,819 - #27 }
INFO  06:14:12,820 - #19 int
INFO  06:14:12,821 - #19 inkrement
INFO  06:14:12,821 - #24 (
INFO  06:14:12,821 - #19 int
INFO  06:14:12,821 - #19 a
INFO  06:14:12,829 - #22 ,
INFO  06:14:12,830 - #19 int
INFO  06:14:12,830 - #19 inc
INFO  06:14:12,830 - #25 )
INFO  06:14:12,830 - #19 int
INFO  06:14:12,830 - #19 pom
INFO  06:14:12,831 - #23 ;
INFO  06:14:12,831 - #26 {
INFO  06:14:12,832 - #8 if
INFO  06:14:12,832 - #24 (
INFO  06:14:12,832 - #19 inc
INFO  06:14:12,832 - #39 ==
INFO  06:14:12,852 - #19 jedan
INFO  06:14:12,856 - #25 )
INFO  06:14:12,867 - #19 pom
INFO  06:14:12,869 - #21 =
INFO  06:14:12,870 - #16 1
INFO  06:14:12,870 - #23 ;
INFO  06:14:12,870 - #9 else
ERROR 06:14:12,871 - 
Sintaksna greska na liniji 27
ERROR 06:14:12,872 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 27
INFO  06:14:32,940 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:14:33,058 - #2 program
INFO  06:14:33,061 - #19 test302
INFO  06:14:33,065 - #15 const
INFO  06:14:33,065 - #19 int
INFO  06:14:33,065 - #19 jedan
INFO  06:14:33,067 - #21 =
INFO  06:14:33,068 - #16 1
INFO  06:14:33,069 - #23 ;
INFO  06:14:33,077 - #19 int
INFO  06:14:33,080 - #19 i
INFO  06:14:33,080 - #23 ;
INFO  06:14:33,082 - #19 bool
INFO  06:14:33,083 - #19 ibool
INFO  06:14:33,083 - #23 ;
INFO  06:14:33,084 - #19 int
INFO  06:14:33,084 - #19 niz2
INFO  06:14:33,084 - #23 ;
INFO  06:14:33,085 - #19 int
INFO  06:14:33,085 - #19 niz
INFO  06:14:33,085 - #28 [
INFO  06:14:33,085 - #29 ]
INFO  06:14:33,086 - #23 ;
INFO  06:14:33,086 - #19 int
INFO  06:14:33,086 - #19 a
INFO  06:14:33,087 - #22 ,
INFO  06:14:33,087 - #19 curr
INFO  06:14:33,087 - #23 ;
INFO  06:14:33,088 - #26 {
INFO  06:14:33,091 - #19 int
INFO  06:14:33,091 - #19 sum
INFO  06:14:33,091 - #24 (
INFO  06:14:33,093 - #19 int
INFO  06:14:33,094 - #19 z
INFO  06:14:33,095 - #22 ,
INFO  06:14:33,096 - #19 int
INFO  06:14:33,097 - #19 d
INFO  06:14:33,097 - #25 )
INFO  06:14:33,098 - #26 {
INFO  06:14:33,099 - #4 return
INFO  06:14:33,099 - #19 z
INFO  06:14:33,099 - #20 +
INFO  06:14:33,100 - #19 d
INFO  06:14:33,102 - #23 ;
INFO  06:14:33,103 - #27 }
INFO  06:14:33,106 - #19 int
INFO  06:14:33,107 - #19 inkrement
INFO  06:14:33,108 - #24 (
INFO  06:14:33,108 - #19 int
INFO  06:14:33,108 - #19 a
INFO  06:14:33,108 - #22 ,
INFO  06:14:33,109 - #19 int
INFO  06:14:33,109 - #19 inc
INFO  06:14:33,110 - #25 )
INFO  06:14:33,110 - #19 int
INFO  06:14:33,110 - #19 pom
INFO  06:14:33,117 - #23 ;
INFO  06:14:33,118 - #26 {
INFO  06:14:33,118 - #8 if
INFO  06:14:33,118 - #24 (
INFO  06:14:33,118 - #19 inc
INFO  06:14:33,119 - #39 ==
INFO  06:14:33,122 - #19 jedan
INFO  06:14:33,129 - #25 )
INFO  06:14:33,137 - #19 pom
INFO  06:14:33,139 - #21 =
INFO  06:14:33,139 - #16 1
INFO  06:14:33,140 - #23 ;
INFO  06:14:33,140 - #9 else
ERROR 06:14:33,140 - 
Sintaksna greska na liniji 27
ERROR 06:14:33,141 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 27
INFO  06:15:27,051 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:15:27,153 - #2 program
INFO  06:15:27,154 - #19 test302
INFO  06:15:27,154 - #15 const
INFO  06:15:27,154 - #19 int
INFO  06:15:27,154 - #19 jedan
INFO  06:15:27,155 - #21 =
INFO  06:15:27,155 - #16 1
INFO  06:15:27,156 - #23 ;
INFO  06:15:27,159 - #19 int
INFO  06:15:27,160 - #19 i
INFO  06:15:27,160 - #23 ;
INFO  06:15:27,161 - #19 bool
INFO  06:15:27,161 - #19 ibool
INFO  06:15:27,161 - #23 ;
INFO  06:15:27,162 - #19 int
INFO  06:15:27,162 - #19 niz2
INFO  06:15:27,162 - #23 ;
INFO  06:15:27,162 - #19 int
INFO  06:15:27,162 - #19 niz
INFO  06:15:27,162 - #28 [
INFO  06:15:27,162 - #29 ]
INFO  06:15:27,162 - #23 ;
INFO  06:15:27,162 - #19 int
INFO  06:15:27,162 - #19 a
INFO  06:15:27,163 - #22 ,
INFO  06:15:27,163 - #19 curr
INFO  06:15:27,163 - #23 ;
INFO  06:15:27,163 - #26 {
INFO  06:15:27,164 - #19 int
INFO  06:15:27,164 - #19 sum
INFO  06:15:27,164 - #24 (
INFO  06:15:27,165 - #19 int
INFO  06:15:27,165 - #19 z
INFO  06:15:27,165 - #22 ,
INFO  06:15:27,167 - #19 int
INFO  06:15:27,167 - #19 d
INFO  06:15:27,167 - #25 )
INFO  06:15:27,167 - #26 {
INFO  06:15:27,168 - #4 return
INFO  06:15:27,168 - #19 z
INFO  06:15:27,168 - #20 +
INFO  06:15:27,168 - #19 d
INFO  06:15:27,171 - #23 ;
INFO  06:15:27,171 - #27 }
INFO  06:15:27,172 - #19 int
INFO  06:15:27,173 - #19 inkrement
INFO  06:15:27,173 - #24 (
INFO  06:15:27,173 - #19 int
INFO  06:15:27,173 - #19 a
INFO  06:15:27,173 - #22 ,
INFO  06:15:27,173 - #19 int
INFO  06:15:27,174 - #19 inc
INFO  06:15:27,174 - #25 )
INFO  06:15:27,174 - #19 int
INFO  06:15:27,174 - #19 pom
INFO  06:15:27,174 - #23 ;
INFO  06:15:27,175 - #26 {
INFO  06:15:27,175 - #8 if
INFO  06:15:27,175 - #24 (
INFO  06:15:27,175 - #19 inc
INFO  06:15:27,175 - #39 ==
INFO  06:15:27,175 - #19 jedan
INFO  06:15:27,177 - #25 )
INFO  06:15:27,182 - #19 pom
INFO  06:15:27,184 - #21 =
INFO  06:15:27,184 - #16 1
INFO  06:15:27,185 - #23 ;
INFO  06:15:27,185 - #4 return
INFO  06:15:27,186 - #19 sum
INFO  06:15:27,187 - #24 (
INFO  06:15:27,187 - #19 a
INFO  06:15:27,187 - #22 ,
INFO  06:15:27,199 - #19 pom
INFO  06:15:27,199 - #25 )
INFO  06:15:27,202 - #23 ;
INFO  06:15:27,202 - #27 }
INFO  06:15:27,203 - #19 bool
INFO  06:15:27,203 - #19 verify
INFO  06:15:27,203 - #24 (
INFO  06:15:27,203 - #25 )
INFO  06:15:27,205 - #26 {
INFO  06:15:27,205 - #3 print
INFO  06:15:27,206 - #24 (
INFO  06:15:27,207 - #17 'v'
INFO  06:15:27,210 - #25 )
INFO  06:20:06,541 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:20:06,658 - #2 program
INFO  06:20:06,658 - #19 test302
INFO  06:20:06,659 - #15 const
INFO  06:20:06,659 - #19 int
INFO  06:20:06,659 - #19 jedan
INFO  06:20:06,660 - #21 =
INFO  06:20:06,661 - #16 1
INFO  06:20:06,664 - #23 ;
INFO  06:20:06,669 - #19 int
INFO  06:20:06,672 - #19 i
INFO  06:20:06,672 - #23 ;
INFO  06:20:06,673 - #19 bool
INFO  06:20:06,674 - #19 ibool
INFO  06:20:06,674 - #23 ;
INFO  06:20:06,675 - #19 int
INFO  06:20:06,675 - #19 niz2
INFO  06:20:06,676 - #23 ;
INFO  06:20:06,676 - #19 int
INFO  06:20:06,676 - #19 niz
INFO  06:20:06,676 - #28 [
INFO  06:20:06,676 - #29 ]
INFO  06:20:06,677 - #23 ;
INFO  06:20:06,677 - #19 int
INFO  06:20:06,677 - #19 a
INFO  06:20:06,678 - #22 ,
INFO  06:20:06,678 - #19 curr
INFO  06:20:06,678 - #23 ;
INFO  06:20:06,678 - #26 {
INFO  06:20:06,681 - #19 int
INFO  06:20:06,681 - #19 sum
INFO  06:20:06,683 - #24 (
INFO  06:20:06,686 - #19 int
INFO  06:20:06,686 - #19 z
INFO  06:20:06,687 - #22 ,
INFO  06:20:06,688 - #19 int
INFO  06:20:06,689 - #19 d
INFO  06:20:06,690 - #25 )
INFO  06:20:06,691 - #26 {
INFO  06:20:06,692 - #4 return
INFO  06:20:06,693 - #19 z
INFO  06:20:06,693 - #20 +
INFO  06:20:06,693 - #19 d
INFO  06:20:06,697 - #23 ;
INFO  06:20:06,698 - #27 }
INFO  06:20:06,700 - #19 int
INFO  06:20:06,701 - #19 inkrement
INFO  06:20:06,701 - #24 (
INFO  06:20:06,701 - #19 int
INFO  06:20:06,702 - #19 a
INFO  06:20:06,702 - #22 ,
INFO  06:20:06,702 - #19 int
INFO  06:20:06,702 - #19 inc
INFO  06:20:06,703 - #25 )
INFO  06:20:06,703 - #19 int
INFO  06:20:06,703 - #19 pom
INFO  06:20:06,704 - #23 ;
INFO  06:20:06,704 - #26 {
INFO  06:20:06,707 - #8 if
INFO  06:20:06,707 - #24 (
INFO  06:20:06,707 - #19 inc
INFO  06:20:06,707 - #39 ==
INFO  06:20:06,708 - #19 jedan
INFO  06:20:06,712 - #25 )
INFO  06:20:06,721 - #19 pom
INFO  06:20:06,748 - #21 =
INFO  06:20:06,748 - #16 1
INFO  06:20:06,748 - #23 ;
INFO  06:20:06,749 - #4 return
INFO  06:20:06,749 - #19 sum
INFO  06:20:06,750 - #24 (
INFO  06:20:06,750 - #19 a
INFO  06:20:06,750 - #22 ,
INFO  06:20:06,758 - #19 pom
INFO  06:20:06,758 - #25 )
INFO  06:20:06,765 - #23 ;
INFO  06:20:06,767 - #27 }
INFO  06:20:06,767 - #19 bool
INFO  06:20:06,767 - #19 verify
INFO  06:20:06,767 - #24 (
INFO  06:20:06,768 - #25 )
INFO  06:20:06,769 - #26 {
INFO  06:20:06,769 - #4 return
INFO  06:20:06,769 - #19 false
INFO  06:20:06,769 - #23 ;
INFO  06:20:06,769 - #27 }
INFO  06:20:06,770 - #19 void
INFO  06:20:06,770 - #14 main
INFO  06:20:06,770 - #24 (
INFO  06:20:06,770 - #25 )
INFO  06:20:06,770 - #26 {
INFO  06:20:06,771 - #8 if
INFO  06:20:06,771 - #24 (
INFO  06:20:06,771 - #16 1
INFO  06:20:06,771 - #40 !=
INFO  06:20:06,771 - #16 1
INFO  06:20:06,772 - #25 )
INFO  06:20:06,773 - #3 print
INFO  06:20:06,773 - #24 (
INFO  06:20:06,773 - #33 -
INFO  06:20:06,773 - #16 6
INFO  06:20:06,774 - #25 )
INFO  06:20:06,776 - #23 ;
INFO  06:20:06,776 - #19 ibool
INFO  06:20:06,777 - #21 =
INFO  06:20:06,777 - #19 false
INFO  06:20:06,777 - #23 ;
INFO  06:20:06,778 - #19 i
INFO  06:20:06,778 - #21 =
INFO  06:20:06,778 - #16 0
INFO  06:20:06,778 - #23 ;
INFO  06:20:06,779 - #7 while
INFO  06:20:06,781 - #24 (
INFO  06:20:06,788 - #19 i
INFO  06:20:06,790 - #35 <
INFO  06:20:06,790 - #16 5
INFO  06:20:06,791 - #25 )
INFO  06:20:06,792 - #26 {
INFO  06:20:06,793 - #8 if
INFO  06:20:06,793 - #24 (
INFO  06:20:06,793 - #19 i
INFO  06:20:06,793 - #39 ==
INFO  06:20:06,794 - #16 2
INFO  06:20:06,796 - #25 )
INFO  06:20:06,800 - #19 ibool
INFO  06:20:06,800 - #21 =
INFO  06:20:06,800 - #19 true
INFO  06:20:06,800 - #23 ;
INFO  06:20:06,801 - #19 i
INFO  06:20:06,801 - #44 ++
INFO  06:20:06,801 - #23 ;
INFO  06:20:06,801 - #27 }
INFO  06:20:06,802 - #8 if
INFO  06:20:06,802 - #24 (
INFO  06:20:06,803 - #19 ibool
INFO  06:20:06,804 - #25 )
INFO  06:20:06,805 - #8 if
INFO  06:20:06,805 - #24 (
INFO  06:20:06,805 - #19 i
INFO  06:20:06,805 - #39 ==
INFO  06:20:06,805 - #16 5
INFO  06:20:06,805 - #25 )
INFO  06:20:06,805 - #3 print
INFO  06:20:06,806 - #24 (
INFO  06:20:06,806 - #16 1
INFO  06:20:06,806 - #25 )
INFO  06:20:06,806 - #23 ;
INFO  06:20:06,806 - #19 a
INFO  06:20:06,807 - #21 =
INFO  06:20:06,807 - #16 2
INFO  06:20:06,807 - #23 ;
INFO  06:20:06,807 - #19 niz
INFO  06:20:06,807 - #21 =
INFO  06:20:06,808 - #13 new
INFO  06:20:06,808 - #19 int
INFO  06:20:06,808 - #28 [
INFO  06:20:06,808 - #16 3
INFO  06:20:06,808 - #29 ]
INFO  06:20:06,808 - #23 ;
INFO  06:20:06,808 - #19 niz
INFO  06:20:06,808 - #28 [
INFO  06:20:06,809 - #16 0
INFO  06:20:06,809 - #29 ]
INFO  06:20:06,809 - #21 =
INFO  06:20:06,809 - #16 1
INFO  06:20:06,809 - #32 *
INFO  06:20:06,810 - #19 a
INFO  06:20:06,811 - #23 ;
INFO  06:20:06,812 - #19 niz
INFO  06:20:06,812 - #28 [
INFO  06:20:06,812 - #16 1
INFO  06:20:06,812 - #29 ]
INFO  06:20:06,815 - #21 =
INFO  06:20:06,816 - #16 2
INFO  06:20:06,816 - #32 *
INFO  06:20:06,817 - #19 a
INFO  06:20:06,817 - #23 ;
INFO  06:20:06,817 - #19 niz
INFO  06:20:06,817 - #28 [
INFO  06:20:06,817 - #16 2
INFO  06:20:06,817 - #29 ]
INFO  06:20:06,817 - #21 =
INFO  06:20:06,818 - #19 sum
INFO  06:20:06,818 - #24 (
INFO  06:20:06,818 - #19 niz
INFO  06:20:06,818 - #28 [
INFO  06:20:06,818 - #16 1
INFO  06:20:06,818 - #29 ]
INFO  06:20:06,818 - #22 ,
INFO  06:20:06,818 - #19 niz
INFO  06:20:06,819 - #28 [
INFO  06:20:06,819 - #16 0
INFO  06:20:06,819 - #29 ]
INFO  06:20:06,819 - #25 )
INFO  06:20:06,819 - #32 *
INFO  06:20:06,820 - #19 a
INFO  06:20:06,820 - #20 +
INFO  06:20:06,820 - #16 1
INFO  06:20:06,820 - #23 ;
INFO  06:20:06,820 - #8 if
INFO  06:20:06,821 - #24 (
INFO  06:20:06,821 - #19 verify
INFO  06:20:06,821 - #24 (
INFO  06:20:06,821 - #25 )
INFO  06:20:06,823 - #19 niz
ERROR 06:20:06,823 - 
Sintaksna greska na liniji 58
ERROR 06:20:06,823 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 58
INFO  06:20:36,656 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:20:36,792 - #2 program
INFO  06:20:36,793 - #19 test302
INFO  06:20:36,793 - #15 const
INFO  06:20:36,793 - #19 int
INFO  06:20:36,793 - #19 jedan
INFO  06:20:36,794 - #21 =
INFO  06:20:36,795 - #16 1
INFO  06:20:36,796 - #23 ;
INFO  06:20:36,800 - #19 int
INFO  06:20:36,803 - #19 i
INFO  06:20:36,803 - #23 ;
INFO  06:20:36,806 - #19 bool
INFO  06:20:36,807 - #19 ibool
INFO  06:20:36,807 - #23 ;
INFO  06:20:36,807 - #19 int
INFO  06:20:36,808 - #19 niz2
INFO  06:20:36,808 - #23 ;
INFO  06:20:36,808 - #19 int
INFO  06:20:36,808 - #19 niz
INFO  06:20:36,808 - #28 [
INFO  06:20:36,809 - #29 ]
INFO  06:20:36,809 - #23 ;
INFO  06:20:36,809 - #19 int
INFO  06:20:36,810 - #19 a
INFO  06:20:36,810 - #22 ,
INFO  06:20:36,810 - #19 curr
INFO  06:20:36,810 - #23 ;
INFO  06:20:36,810 - #26 {
INFO  06:20:36,812 - #19 int
INFO  06:20:36,812 - #19 sum
INFO  06:20:36,812 - #24 (
INFO  06:20:36,812 - #19 int
INFO  06:20:36,813 - #19 z
INFO  06:20:36,813 - #22 ,
INFO  06:20:36,815 - #19 int
INFO  06:20:36,815 - #19 d
INFO  06:20:36,815 - #25 )
INFO  06:20:36,816 - #26 {
INFO  06:20:36,816 - #4 return
INFO  06:20:36,816 - #19 z
INFO  06:20:36,816 - #20 +
INFO  06:20:36,817 - #19 d
INFO  06:20:36,821 - #23 ;
INFO  06:20:36,822 - #27 }
INFO  06:20:36,823 - #19 int
INFO  06:20:36,823 - #19 inkrement
INFO  06:20:36,824 - #24 (
INFO  06:20:36,824 - #19 int
INFO  06:20:36,824 - #19 a
INFO  06:20:36,824 - #22 ,
INFO  06:20:36,825 - #19 int
INFO  06:20:36,825 - #19 inc
INFO  06:20:36,825 - #25 )
INFO  06:20:36,825 - #19 int
INFO  06:20:36,825 - #19 pom
INFO  06:20:36,825 - #23 ;
INFO  06:20:36,826 - #26 {
INFO  06:20:36,826 - #8 if
INFO  06:20:36,826 - #24 (
INFO  06:20:36,826 - #19 inc
INFO  06:20:36,827 - #39 ==
INFO  06:20:36,827 - #19 jedan
INFO  06:20:36,829 - #25 )
INFO  06:20:36,833 - #19 pom
INFO  06:20:36,843 - #21 =
INFO  06:20:36,843 - #16 1
INFO  06:20:36,843 - #23 ;
INFO  06:20:36,845 - #4 return
INFO  06:20:36,845 - #19 sum
INFO  06:20:36,846 - #24 (
INFO  06:20:36,846 - #19 a
INFO  06:20:36,846 - #22 ,
INFO  06:20:36,864 - #19 pom
INFO  06:20:36,864 - #25 )
INFO  06:20:36,871 - #23 ;
INFO  06:20:36,872 - #27 }
INFO  06:20:36,873 - #19 bool
INFO  06:20:36,873 - #19 verify
INFO  06:20:36,875 - #24 (
INFO  06:20:36,875 - #25 )
INFO  06:20:36,876 - #26 {
INFO  06:20:36,876 - #4 return
INFO  06:20:36,876 - #19 false
INFO  06:20:36,877 - #23 ;
INFO  06:20:36,878 - #27 }
INFO  06:20:36,878 - #19 void
INFO  06:20:36,878 - #14 main
INFO  06:20:36,878 - #24 (
INFO  06:20:36,878 - #25 )
INFO  06:20:36,878 - #26 {
INFO  06:20:36,879 - #8 if
INFO  06:20:36,879 - #24 (
INFO  06:20:36,879 - #16 1
INFO  06:20:36,879 - #40 !=
INFO  06:20:36,879 - #16 1
INFO  06:20:36,880 - #25 )
INFO  06:20:36,880 - #3 print
INFO  06:20:36,881 - #24 (
INFO  06:20:36,881 - #33 -
INFO  06:20:36,881 - #16 6
INFO  06:20:36,883 - #25 )
INFO  06:20:36,888 - #23 ;
INFO  06:20:36,888 - #19 ibool
INFO  06:20:36,888 - #21 =
INFO  06:20:36,889 - #19 false
INFO  06:20:36,889 - #23 ;
INFO  06:20:36,890 - #19 i
INFO  06:20:36,891 - #21 =
INFO  06:20:36,891 - #16 0
INFO  06:20:36,891 - #23 ;
INFO  06:20:36,891 - #7 while
INFO  06:20:36,892 - #24 (
INFO  06:20:36,892 - #19 i
INFO  06:20:36,892 - #35 <
INFO  06:20:36,892 - #16 5
INFO  06:20:36,893 - #25 )
INFO  06:20:36,893 - #26 {
INFO  06:20:36,893 - #8 if
INFO  06:20:36,894 - #24 (
INFO  06:20:36,894 - #19 i
INFO  06:20:36,894 - #39 ==
INFO  06:20:36,895 - #16 2
INFO  06:20:36,895 - #25 )
INFO  06:20:36,895 - #19 ibool
INFO  06:20:36,895 - #21 =
INFO  06:20:36,896 - #19 true
INFO  06:20:36,896 - #23 ;
INFO  06:20:36,896 - #19 i
INFO  06:20:36,896 - #44 ++
INFO  06:20:36,898 - #23 ;
INFO  06:20:36,898 - #27 }
INFO  06:20:36,903 - #8 if
INFO  06:20:36,907 - #24 (
INFO  06:20:36,908 - #19 ibool
INFO  06:20:36,909 - #25 )
INFO  06:20:36,909 - #8 if
INFO  06:20:36,910 - #24 (
INFO  06:20:36,910 - #19 i
INFO  06:20:36,910 - #39 ==
INFO  06:20:36,910 - #16 5
INFO  06:20:36,910 - #25 )
INFO  06:20:36,911 - #3 print
INFO  06:20:36,911 - #24 (
INFO  06:20:36,911 - #16 1
INFO  06:20:36,911 - #25 )
INFO  06:20:36,911 - #23 ;
INFO  06:20:36,911 - #19 a
INFO  06:20:36,911 - #21 =
INFO  06:20:36,912 - #16 2
INFO  06:20:36,912 - #23 ;
INFO  06:20:36,912 - #19 niz
INFO  06:20:36,912 - #21 =
INFO  06:20:36,912 - #13 new
INFO  06:20:36,912 - #19 int
INFO  06:20:36,912 - #28 [
INFO  06:20:36,912 - #16 3
INFO  06:20:36,912 - #29 ]
INFO  06:20:36,913 - #23 ;
INFO  06:20:36,913 - #19 niz
INFO  06:20:36,914 - #28 [
INFO  06:20:36,914 - #16 0
INFO  06:20:36,915 - #29 ]
INFO  06:20:36,915 - #21 =
INFO  06:20:36,915 - #16 1
INFO  06:20:36,915 - #32 *
INFO  06:20:36,915 - #19 a
INFO  06:20:36,919 - #23 ;
INFO  06:20:36,920 - #19 niz
INFO  06:20:36,920 - #28 [
INFO  06:20:36,920 - #16 1
INFO  06:20:36,920 - #29 ]
INFO  06:20:36,920 - #21 =
INFO  06:20:36,920 - #16 2
INFO  06:20:36,921 - #32 *
INFO  06:20:36,921 - #19 a
INFO  06:20:36,921 - #23 ;
INFO  06:20:36,921 - #19 niz
INFO  06:20:36,921 - #28 [
INFO  06:20:36,921 - #16 2
INFO  06:20:36,921 - #29 ]
INFO  06:20:36,922 - #21 =
INFO  06:20:36,922 - #19 sum
INFO  06:20:36,922 - #24 (
INFO  06:20:36,922 - #19 niz
INFO  06:20:36,922 - #28 [
INFO  06:20:36,922 - #16 1
INFO  06:20:36,922 - #29 ]
INFO  06:20:36,922 - #22 ,
INFO  06:20:36,922 - #19 niz
INFO  06:20:36,922 - #28 [
INFO  06:20:36,923 - #16 0
INFO  06:20:36,924 - #29 ]
INFO  06:20:36,925 - #25 )
INFO  06:20:36,925 - #32 *
INFO  06:20:36,925 - #19 a
INFO  06:20:36,925 - #20 +
INFO  06:20:36,926 - #16 1
INFO  06:20:36,926 - #23 ;
INFO  06:20:36,926 - #3 print
INFO  06:20:36,926 - #24 (
INFO  06:20:36,926 - #19 eol
INFO  06:20:36,926 - #25 )
INFO  06:20:36,927 - #23 ;
INFO  06:20:36,927 - #19 i
INFO  06:20:36,927 - #21 =
INFO  06:20:36,927 - #16 0
INFO  06:20:36,927 - #23 ;
INFO  06:20:36,927 - #7 while
INFO  06:20:36,927 - #24 (
INFO  06:20:36,927 - #19 i
INFO  06:20:36,928 - #35 <
INFO  06:20:36,928 - #16 10
INFO  06:20:36,928 - #25 )
INFO  06:20:36,928 - #26 {
INFO  06:20:36,928 - #8 if
INFO  06:20:36,928 - #24 (
INFO  06:20:36,928 - #19 i
INFO  06:20:36,928 - #39 ==
INFO  06:20:36,929 - #16 3
INFO  06:20:36,929 - #25 )
INFO  06:20:36,929 - #26 {
INFO  06:20:36,929 - #19 i
INFO  06:20:36,929 - #44 ++
INFO  06:20:36,930 - #23 ;
INFO  06:20:36,930 - #11 continue
INFO  06:20:36,930 - #23 ;
INFO  06:20:36,930 - #27 }
INFO  06:20:36,931 - #8 if
INFO  06:20:36,931 - #24 (
INFO  06:20:36,931 - #19 i
INFO  06:20:36,931 - #39 ==
INFO  06:20:36,932 - #16 4
INFO  06:20:36,932 - #25 )
INFO  06:20:36,932 - #12 break
INFO  06:20:36,932 - #23 ;
INFO  06:20:36,932 - #19 i
INFO  06:20:36,933 - #21 =
INFO  06:20:36,936 - #19 inkrement
INFO  06:20:36,936 - #24 (
INFO  06:20:36,946 - #19 i
INFO  06:20:36,946 - #22 ,
INFO  06:20:36,947 - #16 1
INFO  06:20:36,947 - #25 )
INFO  06:20:36,947 - #23 ;
INFO  06:20:36,947 - #27 }
INFO  06:20:36,947 - #8 if
INFO  06:20:36,947 - #24 (
INFO  06:20:36,947 - #19 i
INFO  06:20:36,948 - #39 ==
INFO  06:20:36,948 - #16 3
INFO  06:20:36,948 - #19 verify
ERROR 06:20:36,948 - 
Sintaksna greska na liniji 73
ERROR 06:20:36,949 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 73
INFO  06:24:55,689 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:24:55,853 - #2 program
INFO  06:24:55,854 - #19 test302
INFO  06:24:55,855 - #15 const
INFO  06:24:55,855 - #19 int
INFO  06:24:55,855 - #19 jedan
INFO  06:24:55,856 - #21 =
INFO  06:24:55,856 - #16 1
INFO  06:24:55,859 - #23 ;
INFO  06:24:55,870 - #19 int
INFO  06:24:55,872 - #19 i
INFO  06:24:55,872 - #23 ;
INFO  06:24:55,873 - #19 bool
INFO  06:24:55,875 - #19 ibool
INFO  06:24:55,875 - #23 ;
INFO  06:24:55,875 - #19 int
INFO  06:24:55,875 - #19 niz2
INFO  06:24:55,875 - #23 ;
INFO  06:24:55,875 - #19 int
INFO  06:24:55,875 - #19 niz
INFO  06:24:55,876 - #28 [
INFO  06:24:55,876 - #29 ]
INFO  06:24:55,876 - #23 ;
INFO  06:24:55,876 - #19 int
INFO  06:24:55,876 - #19 a
INFO  06:24:55,876 - #22 ,
INFO  06:24:55,877 - #19 curr
INFO  06:24:55,877 - #23 ;
INFO  06:24:55,877 - #26 {
INFO  06:24:55,878 - #19 int
INFO  06:24:55,878 - #19 sum
INFO  06:24:55,878 - #24 (
INFO  06:24:55,878 - #19 int
INFO  06:24:55,878 - #19 z
INFO  06:24:55,878 - #22 ,
INFO  06:24:55,879 - #19 int
INFO  06:24:55,879 - #19 d
INFO  06:24:55,879 - #25 )
INFO  06:24:55,880 - #26 {
INFO  06:24:55,880 - #4 return
INFO  06:24:55,880 - #19 z
INFO  06:24:55,880 - #20 +
INFO  06:24:55,880 - #19 d
INFO  06:24:55,882 - #23 ;
INFO  06:24:55,882 - #27 }
INFO  06:24:55,883 - #19 int
INFO  06:24:55,884 - #19 inkrement
INFO  06:24:55,884 - #24 (
INFO  06:24:55,884 - #19 int
INFO  06:24:55,884 - #19 a
INFO  06:24:55,884 - #22 ,
INFO  06:24:55,884 - #19 int
INFO  06:24:55,885 - #19 inc
INFO  06:24:55,885 - #25 )
INFO  06:24:55,885 - #19 int
INFO  06:24:55,885 - #19 pom
INFO  06:24:55,885 - #23 ;
INFO  06:24:55,885 - #26 {
INFO  06:24:55,885 - #8 if
INFO  06:24:55,885 - #24 (
INFO  06:24:55,885 - #19 inc
INFO  06:24:55,885 - #39 ==
INFO  06:24:55,886 - #19 jedan
INFO  06:24:55,887 - #25 )
INFO  06:24:55,889 - #19 pom
INFO  06:24:55,890 - #21 =
INFO  06:24:55,891 - #16 1
INFO  06:24:55,891 - #23 ;
INFO  06:24:55,891 - #4 return
INFO  06:24:55,891 - #19 sum
INFO  06:24:55,891 - #24 (
INFO  06:24:55,892 - #19 a
INFO  06:24:55,892 - #22 ,
INFO  06:24:55,898 - #19 pom
INFO  06:24:55,898 - #25 )
INFO  06:24:55,900 - #23 ;
INFO  06:24:55,901 - #27 }
INFO  06:24:55,901 - #19 bool
INFO  06:24:55,901 - #19 verify
INFO  06:24:55,901 - #24 (
INFO  06:24:55,901 - #25 )
INFO  06:24:55,902 - #26 {
INFO  06:24:55,902 - #4 return
INFO  06:24:55,902 - #19 false
INFO  06:24:55,902 - #23 ;
INFO  06:24:55,902 - #27 }
INFO  06:24:55,902 - #19 void
INFO  06:24:55,902 - #14 main
INFO  06:24:55,902 - #24 (
INFO  06:24:55,903 - #25 )
INFO  06:24:55,903 - #26 {
INFO  06:24:55,903 - #8 if
INFO  06:24:55,903 - #24 (
INFO  06:24:55,903 - #16 1
INFO  06:24:55,903 - #40 !=
INFO  06:24:55,903 - #16 1
INFO  06:24:55,903 - #25 )
INFO  06:24:55,904 - #3 print
INFO  06:24:55,904 - #24 (
INFO  06:24:55,904 - #33 -
INFO  06:24:55,904 - #16 6
INFO  06:24:55,905 - #25 )
INFO  06:24:55,906 - #23 ;
INFO  06:24:55,906 - #19 ibool
INFO  06:24:55,906 - #21 =
INFO  06:24:55,906 - #19 false
INFO  06:24:55,906 - #23 ;
INFO  06:24:55,906 - #19 i
INFO  06:24:55,906 - #21 =
INFO  06:24:55,906 - #16 0
INFO  06:24:55,906 - #23 ;
INFO  06:24:55,918 - #7 while
INFO  06:24:55,919 - #24 (
INFO  06:24:55,919 - #19 i
INFO  06:24:55,920 - #35 <
INFO  06:24:55,920 - #16 5
INFO  06:24:55,922 - #25 )
INFO  06:24:55,922 - #26 {
INFO  06:24:55,922 - #8 if
INFO  06:24:55,922 - #24 (
INFO  06:24:55,922 - #19 i
INFO  06:24:55,922 - #39 ==
INFO  06:24:55,923 - #16 2
INFO  06:24:55,923 - #25 )
INFO  06:24:55,923 - #19 ibool
INFO  06:24:55,924 - #21 =
INFO  06:24:55,926 - #19 true
INFO  06:24:55,933 - #23 ;
INFO  06:24:55,934 - #19 i
INFO  06:24:55,934 - #44 ++
INFO  06:24:55,935 - #23 ;
INFO  06:24:55,935 - #27 }
INFO  06:24:55,938 - #8 if
INFO  06:24:55,939 - #24 (
INFO  06:24:55,939 - #19 ibool
INFO  06:24:55,939 - #25 )
INFO  06:24:55,939 - #8 if
INFO  06:24:55,940 - #24 (
INFO  06:24:55,940 - #19 i
INFO  06:24:55,940 - #39 ==
INFO  06:24:55,941 - #16 5
INFO  06:24:55,942 - #25 )
INFO  06:24:55,942 - #3 print
INFO  06:24:55,942 - #24 (
INFO  06:24:55,942 - #16 1
INFO  06:24:55,943 - #25 )
INFO  06:24:55,943 - #23 ;
INFO  06:24:55,943 - #19 a
INFO  06:24:55,943 - #21 =
INFO  06:24:55,943 - #16 2
INFO  06:24:55,943 - #23 ;
INFO  06:24:55,943 - #19 niz
INFO  06:24:55,944 - #21 =
INFO  06:24:55,944 - #13 new
INFO  06:24:55,944 - #19 int
INFO  06:24:55,944 - #28 [
INFO  06:24:55,945 - #16 3
INFO  06:24:55,946 - #29 ]
INFO  06:24:55,946 - #23 ;
INFO  06:24:55,946 - #19 niz
INFO  06:24:55,946 - #28 [
INFO  06:24:55,947 - #16 0
INFO  06:24:55,947 - #29 ]
INFO  06:24:55,947 - #21 =
INFO  06:24:55,947 - #16 1
INFO  06:24:55,948 - #32 *
INFO  06:24:55,948 - #19 a
INFO  06:24:55,951 - #23 ;
INFO  06:24:55,951 - #19 niz
INFO  06:24:55,951 - #28 [
INFO  06:24:55,952 - #16 1
INFO  06:24:55,952 - #29 ]
INFO  06:24:55,952 - #21 =
INFO  06:24:55,952 - #16 2
INFO  06:24:55,952 - #32 *
INFO  06:24:55,953 - #19 a
INFO  06:24:55,953 - #23 ;
INFO  06:24:55,953 - #19 niz
INFO  06:24:55,953 - #28 [
INFO  06:24:55,953 - #16 2
INFO  06:24:55,953 - #29 ]
INFO  06:24:55,953 - #21 =
INFO  06:24:55,953 - #19 sum
INFO  06:24:55,953 - #24 (
INFO  06:24:55,954 - #19 niz
INFO  06:24:55,954 - #28 [
INFO  06:24:55,954 - #16 1
INFO  06:24:55,954 - #29 ]
INFO  06:24:55,954 - #22 ,
INFO  06:24:55,954 - #19 niz
INFO  06:24:55,954 - #28 [
INFO  06:24:55,955 - #16 0
INFO  06:24:55,955 - #29 ]
INFO  06:24:55,955 - #25 )
INFO  06:24:55,956 - #32 *
INFO  06:24:55,956 - #19 a
INFO  06:24:55,956 - #20 +
INFO  06:24:55,956 - #16 1
INFO  06:24:55,956 - #23 ;
INFO  06:24:55,957 - #3 print
INFO  06:24:55,957 - #24 (
INFO  06:24:55,958 - #19 eol
INFO  06:24:55,958 - #25 )
INFO  06:24:55,958 - #23 ;
INFO  06:24:55,958 - #19 i
INFO  06:24:55,959 - #21 =
INFO  06:24:55,959 - #16 0
INFO  06:24:55,959 - #23 ;
INFO  06:24:55,959 - #7 while
INFO  06:24:55,959 - #24 (
INFO  06:24:55,959 - #19 i
INFO  06:24:55,959 - #35 <
INFO  06:24:55,959 - #16 10
INFO  06:24:55,960 - #25 )
INFO  06:24:55,960 - #26 {
INFO  06:24:55,960 - #8 if
INFO  06:24:55,960 - #24 (
INFO  06:24:55,960 - #19 i
INFO  06:24:55,960 - #39 ==
INFO  06:24:55,960 - #16 3
INFO  06:24:55,960 - #25 )
INFO  06:24:55,961 - #26 {
INFO  06:24:55,961 - #19 i
INFO  06:24:55,961 - #44 ++
INFO  06:24:55,961 - #23 ;
INFO  06:24:55,961 - #11 continue
INFO  06:24:55,961 - #23 ;
INFO  06:24:55,962 - #27 }
INFO  06:24:55,963 - #8 if
INFO  06:24:55,963 - #24 (
INFO  06:24:55,964 - #19 i
INFO  06:24:55,964 - #39 ==
INFO  06:24:55,964 - #16 4
INFO  06:24:55,965 - #25 )
INFO  06:24:55,965 - #12 break
INFO  06:24:55,965 - #23 ;
INFO  06:24:55,966 - #19 i
INFO  06:24:55,967 - #21 =
INFO  06:24:55,968 - #19 inkrement
INFO  06:24:55,968 - #24 (
INFO  06:24:55,968 - #19 i
INFO  06:24:55,968 - #22 ,
INFO  06:24:55,968 - #16 1
INFO  06:24:55,968 - #25 )
INFO  06:24:55,969 - #23 ;
INFO  06:24:55,969 - #27 }
INFO  06:24:55,969 - #8 if
INFO  06:24:55,970 - #24 (
INFO  06:24:55,970 - #19 i
INFO  06:24:55,970 - #39 ==
INFO  06:24:55,970 - #16 3
INFO  06:24:55,977 - #42 &&
INFO  06:24:55,977 - #19 verify
INFO  06:24:55,977 - #24 (
INFO  06:24:55,979 - #25 )
INFO  06:24:55,982 - #25 )
INFO  06:24:55,983 - #3 print
INFO  06:24:55,984 - #24 (
INFO  06:24:55,984 - #33 -
INFO  06:24:55,984 - #16 4
INFO  06:24:55,984 - #25 )
INFO  06:24:55,984 - #23 ;
INFO  06:24:55,984 - #6 read
INFO  06:24:55,984 - #24 (
INFO  06:24:55,984 - #19 niz
INFO  06:24:55,984 - #28 [
INFO  06:24:55,984 - #16 0
INFO  06:24:55,985 - #29 ]
INFO  06:24:55,985 - #25 )
INFO  06:24:55,985 - #23 ;
INFO  06:24:55,985 - #6 read
INFO  06:24:55,985 - #24 (
INFO  06:24:55,985 - #19 niz
INFO  06:24:55,985 - #28 [
INFO  06:24:55,985 - #16 1
INFO  06:24:55,985 - #29 ]
INFO  06:24:55,985 - #25 )
INFO  06:24:55,985 - #23 ;
INFO  06:24:55,985 - #6 read
INFO  06:24:55,985 - #24 (
INFO  06:24:55,985 - #19 niz
INFO  06:24:55,985 - #28 [
INFO  06:24:55,985 - #16 2
INFO  06:24:55,985 - #29 ]
INFO  06:24:55,985 - #25 )
INFO  06:24:55,986 - #23 ;
INFO  06:24:55,986 - #3 print
INFO  06:24:55,986 - #24 (
INFO  06:24:55,986 - #19 eol
INFO  06:24:55,986 - #25 )
INFO  06:24:55,986 - #23 ;
INFO  06:24:55,986 - #3 print
INFO  06:24:55,986 - #24 (
INFO  06:24:55,986 - #19 sum
INFO  06:24:55,986 - #24 (
INFO  06:24:55,986 - #19 sum
INFO  06:24:55,986 - #24 (
INFO  06:24:55,986 - #19 niz
INFO  06:24:55,986 - #28 [
INFO  06:24:55,986 - #16 0
INFO  06:24:55,986 - #29 ]
INFO  06:24:55,986 - #22 ,
INFO  06:24:55,986 - #19 niz
INFO  06:24:55,986 - #28 [
INFO  06:24:55,986 - #16 1
INFO  06:24:55,986 - #29 ]
INFO  06:24:55,993 - #25 )
INFO  06:24:55,993 - #22 ,
INFO  06:24:55,993 - #19 niz
INFO  06:24:55,993 - #28 [
INFO  06:24:55,993 - #16 2
INFO  06:24:55,993 - #29 ]
INFO  06:24:55,993 - #25 )
INFO  06:24:55,993 - #25 )
INFO  06:24:55,993 - #23 ;
INFO  06:24:55,994 - #3 print
INFO  06:24:55,994 - #24 (
INFO  06:24:55,994 - #19 eol
INFO  06:24:55,994 - #25 )
INFO  06:24:55,995 - #23 ;
INFO  06:24:55,995 - #3 print
INFO  06:24:55,995 - #24 (
INFO  06:24:55,995 - #19 inkrement
INFO  06:24:55,999 - #24 (
INFO  06:24:55,999 - #19 niz
INFO  06:24:55,999 - #28 [
INFO  06:24:55,999 - #16 2
INFO  06:24:56,000 - #29 ]
INFO  06:24:56,000 - #22 ,
INFO  06:24:56,000 - #16 2
INFO  06:24:56,000 - #25 )
INFO  06:24:56,000 - #25 )
INFO  06:24:56,001 - #23 ;
INFO  06:24:56,001 - #19 a
INFO  06:24:56,001 - #21 =
INFO  06:24:56,001 - #16 3
INFO  06:24:56,001 - #23 ;
INFO  06:24:56,001 - #19 i
INFO  06:24:56,001 - #21 =
INFO  06:24:56,002 - #16 0
INFO  06:24:56,002 - #23 ;
INFO  06:24:56,002 - #7 while
INFO  06:24:56,002 - #24 (
INFO  06:24:56,002 - #19 i
INFO  06:24:56,002 - #35 <
INFO  06:24:56,002 - #16 3
INFO  06:24:56,002 - #25 )
INFO  06:24:56,002 - #26 {
INFO  06:24:56,002 - #19 niz
INFO  06:24:56,003 - #28 [
INFO  06:24:56,003 - #19 i
INFO  06:24:56,003 - #29 ]
INFO  06:24:56,003 - #21 =
INFO  06:24:56,003 - #19 niz
INFO  06:24:56,003 - #28 [
INFO  06:24:56,003 - #19 i
INFO  06:24:56,003 - #29 ]
INFO  06:24:56,003 - #32 *
INFO  06:24:56,003 - #16 2
INFO  06:24:56,003 - #32 *
INFO  06:24:56,003 - #19 a
INFO  06:24:56,004 - #23 ;
INFO  06:24:56,004 - #19 i
INFO  06:24:56,004 - #44 ++
INFO  06:24:56,004 - #23 ;
INFO  06:24:56,005 - #27 }
INFO  06:24:56,005 - #19 niz
INFO  06:24:56,005 - #30 .
INFO  06:24:56,005 - #10 foreach
INFO  06:24:56,005 - #24 (
INFO  06:24:56,005 - #19 curr
INFO  06:24:56,005 - #46 =>
INFO  06:24:56,005 - #3 print
INFO  06:24:56,005 - #24 (
INFO  06:24:56,005 - #19 curr
INFO  06:24:56,005 - #25 )
INFO  06:24:56,005 - #23 ;
INFO  06:24:56,005 - #25 )
INFO  06:24:56,006 - #23 ;
INFO  06:24:56,006 - #3 print
INFO  06:24:56,006 - #24 (
INFO  06:24:56,006 - #19 eol
INFO  06:24:56,006 - #25 )
INFO  06:24:56,006 - #23 ;
INFO  06:24:56,007 - #19 niz2
INFO  06:24:56,009 - #21 =
INFO  06:24:56,010 - #16 0
INFO  06:24:56,017 - #23 ;
INFO  06:24:56,018 - #19 niz
INFO  06:24:56,018 - #30 .
INFO  06:24:56,018 - #10 foreach
INFO  06:24:56,018 - #24 (
INFO  06:24:56,018 - #19 curr
INFO  06:24:56,018 - #46 =>
INFO  06:24:56,019 - #26 {
INFO  06:24:56,019 - #19 niz2
INFO  06:24:56,019 - #21 =
INFO  06:24:56,019 - #19 niz2
INFO  06:24:56,019 - #20 +
INFO  06:24:56,019 - #19 curr
INFO  06:24:56,019 - #32 *
INFO  06:24:56,019 - #19 curr
INFO  06:24:56,020 - #23 ;
INFO  06:24:56,020 - #27 }
INFO  06:24:56,020 - #25 )
INFO  06:24:56,020 - #23 ;
INFO  06:24:56,020 - #3 print
INFO  06:24:56,020 - #24 (
INFO  06:24:56,021 - #19 niz2
INFO  06:24:56,021 - #25 )
INFO  06:24:56,021 - #23 ;
INFO  06:24:56,021 - #27 }
INFO  06:24:56,021 - #27 }
INFO  06:24:56,100 - Program(
 test302
  VarDeclarations(
    VarDeclarationConst(
      VarConstDecl(
        Type(
         int
        ) [Type]
        ConstantVariable(
          VarSingle(
           jedan
          ) [VarSingle]
          Expretion(
            Positive(
            ) [Positive]
            Term(
              FNumber(
               1
              ) [FNumber]
              FactorListNone(
              ) [FactorListNone]
            ) [Term]
            AddopTermNone(
            ) [AddopTermNone]
          ) [Expretion]
        ) [ConstantVariable]
        ConstVarNone(
        ) [ConstVarNone]
      ) [VarConstDecl]
    ) [VarDeclarationConst]
    VarDeclarations(
      VarDeclar(
        VariableDeclaration(
          Type(
           int
          ) [Type]
          VariableDef(
            VarSingle(
             i
            ) [VarSingle]
          ) [VariableDef]
          VariableNameNone(
          ) [VariableNameNone]
        ) [VariableDeclaration]
      ) [VarDeclar]
      VarDeclarations(
        VarDeclar(
          VariableDeclaration(
            Type(
             bool
            ) [Type]
            VariableDef(
              VarSingle(
               ibool
              ) [VarSingle]
            ) [VariableDef]
            VariableNameNone(
            ) [VariableNameNone]
          ) [VariableDeclaration]
        ) [VarDeclar]
        VarDeclarations(
          VarDeclar(
            VariableDeclaration(
              Type(
               int
              ) [Type]
              VariableDef(
                VarSingle(
                 niz2
                ) [VarSingle]
              ) [VariableDef]
              VariableNameNone(
              ) [VariableNameNone]
            ) [VariableDeclaration]
          ) [VarDeclar]
          VarDeclarations(
            VarDeclar(
              VariableDeclaration(
                Type(
                 int
                ) [Type]
                VariableDef(
                  VarArray(
                   niz
                  ) [VarArray]
                ) [VariableDef]
                VariableNameNone(
                ) [VariableNameNone]
              ) [VariableDeclaration]
            ) [VarDeclar]
            VarDeclarations(
              VarDeclar(
                VariableDeclaration(
                  Type(
                   int
                  ) [Type]
                  VariableDef(
                    VarSingle(
                     a
                    ) [VarSingle]
                  ) [VariableDef]
                  VariableNameList(
                    VariableDef(
                      VarSingle(
                       curr
                      ) [VarSingle]
                    ) [VariableDef]
                    VariableNameNone(
                    ) [VariableNameNone]
                  ) [VariableNameList]
                ) [VariableDeclaration]
              ) [VarDeclar]
              NoVarDecl(
              ) [NoVarDecl]
            ) [VarDeclarations]
          ) [VarDeclarations]
        ) [VarDeclarations]
      ) [VarDeclarations]
    ) [VarDeclarations]
  ) [VarDeclarations]
  MethodDeclarations(
    MethodDeclaration(
      Type(
       int
      ) [Type]
     sum
      FormParams(
        FormalParamDecls(
          SingleFormalParamDecl(
            FormalParamDecl(
              Type(
               int
              ) [Type]
             z
            ) [FormalParamDecl]
          ) [SingleFormalParamDecl]
          FormalParamDecl(
            Type(
             int
            ) [Type]
           d
          ) [FormalParamDecl]
        ) [FormalParamDecls]
      ) [FormParams]
      NoVarDecl(
      ) [NoVarDecl]
      StmtList(
        StatementReturn(
          ReturnVal(
            Expretion(
              Positive(
              ) [Positive]
              Term(
                FDesignator(
                  DesignatorIdent(
                   z
                  ) [DesignatorIdent]
                ) [FDesignator]
                FactorListNone(
                ) [FactorListNone]
              ) [Term]
              AddopTerms(
                PlusOp(
                ) [PlusOp]
                Term(
                  FDesignator(
                    DesignatorIdent(
                     d
                    ) [DesignatorIdent]
                  ) [FDesignator]
                  FactorListNone(
                  ) [FactorListNone]
                ) [Term]
                AddopTermNone(
                ) [AddopTermNone]
              ) [AddopTerms]
            ) [Expretion]
          ) [ReturnVal]
        ) [StatementReturn]
        NoStmt(
        ) [NoStmt]
      ) [StmtList]
    ) [MethodDeclaration]
    MethodDeclarations(
      MethodDeclaration(
        Type(
         int
        ) [Type]
       inkrement
        FormParams(
          FormalParamDecls(
            SingleFormalParamDecl(
              FormalParamDecl(
                Type(
                 int
                ) [Type]
               a
              ) [FormalParamDecl]
            ) [SingleFormalParamDecl]
            FormalParamDecl(
              Type(
               int
              ) [Type]
             inc
            ) [FormalParamDecl]
          ) [FormalParamDecls]
        ) [FormParams]
        VarDeclarations(
          VarDeclar(
            VariableDeclaration(
              Type(
               int
              ) [Type]
              VariableDef(
                VarSingle(
                 pom
                ) [VarSingle]
              ) [VariableDef]
              VariableNameNone(
              ) [VariableNameNone]
            ) [VariableDeclaration]
          ) [VarDeclar]
          NoVarDecl(
          ) [NoVarDecl]
        ) [VarDeclarations]
        StmtList(
          StatementIf(
            IfStmnt(
              Condition(
                ConditionTerm(
                  ConditionFactRel(
                    Expretion(
                      Positive(
                      ) [Positive]
                      Term(
                        FDesignator(
                          DesignatorIdent(
                           inc
                          ) [DesignatorIdent]
                        ) [FDesignator]
                        FactorListNone(
                        ) [FactorListNone]
                      ) [Term]
                      AddopTermNone(
                      ) [AddopTermNone]
                    ) [Expretion]
                    EqualOp(
                    ) [EqualOp]
                    Expretion(
                      Positive(
                      ) [Positive]
                      Term(
                        FDesignator(
                          DesignatorIdent(
                           jedan
                          ) [DesignatorIdent]
                        ) [FDesignator]
                        FactorListNone(
                        ) [FactorListNone]
                      ) [Term]
                      AddopTermNone(
                      ) [AddopTermNone]
                    ) [Expretion]
                  ) [ConditionFactRel]
                  CondFactNone(
                  ) [CondFactNone]
                ) [ConditionTerm]
                CondTermNone(
                ) [CondTermNone]
              ) [Condition]
              NoElse(
              ) [NoElse]
            ) [IfStmnt]
          ) [StatementIf]
          StmtList(
            StatementDesignator(
              DesignatorStatementEqual(
                DesignatorIdent(
                 pom
                ) [DesignatorIdent]
                Expretion(
                  Positive(
                  ) [Positive]
                  Term(
                    FNumber(
                     1
                    ) [FNumber]
                    FactorListNone(
                    ) [FactorListNone]
                  ) [Term]
                  AddopTermNone(
                  ) [AddopTermNone]
                ) [Expretion]
              ) [DesignatorStatementEqual]
            ) [StatementDesignator]
            StmtList(
              StatementReturn(
                ReturnVal(
                  Expretion(
                    Positive(
                    ) [Positive]
                    Term(
                      FFunction(
                        DesignatorIdent(
                         sum
                        ) [DesignatorIdent]
                        ActParsOneOne(
                          ActPars(
                            Expretion(
                              Positive(
                              ) [Positive]
                              Term(
                                FDesignator(
                                  DesignatorIdent(
                                   a
                                  ) [DesignatorIdent]
                                ) [FDesignator]
                                FactorListNone(
                                ) [FactorListNone]
                              ) [Term]
                              AddopTermNone(
                              ) [AddopTermNone]
                            ) [Expretion]
                            ExpretionList(
                              Expretion(
                                Positive(
                                ) [Positive]
                                Term(
                                  FDesignator(
                                    DesignatorIdent(
                                     pom
                                    ) [DesignatorIdent]
                                  ) [FDesignator]
                                  FactorListNone(
                                  ) [FactorListNone]
                                ) [Term]
                                AddopTermNone(
                                ) [AddopTermNone]
                              ) [Expretion]
                              ExpresionListNone(
                              ) [ExpresionListNone]
                            ) [ExpretionList]
                          ) [ActPars]
                        ) [ActParsOneOne]
                      ) [FFunction]
                      FactorListNone(
                      ) [FactorListNone]
                    ) [Term]
                    AddopTermNone(
                    ) [AddopTermNone]
                  ) [Expretion]
                ) [ReturnVal]
              ) [StatementReturn]
              NoStmt(
              ) [NoStmt]
            ) [StmtList]
          ) [StmtList]
        ) [StmtList]
      ) [MethodDeclaration]
      MethodDeclarations(
        MethodDeclaration(
          Type(
           bool
          ) [Type]
         verify
          NoFormParam(
          ) [NoFormParam]
          NoVarDecl(
          ) [NoVarDecl]
          StmtList(
            StatementReturn(
              ReturnVal(
                Expretion(
                  Positive(
                  ) [Positive]
                  Term(
                    FDesignator(
                      DesignatorIdent(
                       false
                      ) [DesignatorIdent]
                    ) [FDesignator]
                    FactorListNone(
                    ) [FactorListNone]
                  ) [Term]
                  AddopTermNone(
                  ) [AddopTermNone]
                ) [Expretion]
              ) [ReturnVal]
            ) [StatementReturn]
            NoStmt(
            ) [NoStmt]
          ) [StmtList]
        ) [MethodDeclaration]
        MethodDeclarationMain(
          MainFunction(
            Type(
             void
            ) [Type]
            NoFormParam(
            ) [NoFormParam]
            NoVarDecl(
            ) [NoVarDecl]
            StmtList(
              StatementIf(
                IfStmnt(
                  Condition(
                    ConditionTerm(
                      ConditionFactRel(
                        Expretion(
                          Positive(
                          ) [Positive]
                          Term(
                            FNumber(
                             1
                            ) [FNumber]
                            FactorListNone(
                            ) [FactorListNone]
                          ) [Term]
                          AddopTermNone(
                          ) [AddopTermNone]
                        ) [Expretion]
                        NotEqualOp(
                        ) [NotEqualOp]
                        Expretion(
                          Positive(
                          ) [Positive]
                          Term(
                            FNumber(
                             1
                            ) [FNumber]
                            FactorListNone(
                            ) [FactorListNone]
                          ) [Term]
                          AddopTermNone(
                          ) [AddopTermNone]
                        ) [Expretion]
                      ) [ConditionFactRel]
                      CondFactNone(
                      ) [CondFactNone]
                    ) [ConditionTerm]
                    CondTermNone(
                    ) [CondTermNone]
                  ) [Condition]
                  NoElse(
                  ) [NoElse]
                ) [IfStmnt]
              ) [StatementIf]
              StmtList(
                StatementPrint(
                  Expretion(
                    Negative(
                    ) [Negative]
                    Term(
                      FNumber(
                       6
                      ) [FNumber]
                      FactorListNone(
                      ) [FactorListNone]
                    ) [Term]
                    AddopTermNone(
                    ) [AddopTermNone]
                  ) [Expretion]
                  NoNumber(
                  ) [NoNumber]
                ) [StatementPrint]
                StmtList(
                  StatementDesignator(
                    DesignatorStatementEqual(
                      DesignatorIdent(
                       ibool
                      ) [DesignatorIdent]
                      Expretion(
                        Positive(
                        ) [Positive]
                        Term(
                          FDesignator(
                            DesignatorIdent(
                             false
                            ) [DesignatorIdent]
                          ) [FDesignator]
                          FactorListNone(
                          ) [FactorListNone]
                        ) [Term]
                        AddopTermNone(
                        ) [AddopTermNone]
                      ) [Expretion]
                    ) [DesignatorStatementEqual]
                  ) [StatementDesignator]
                  StmtList(
                    StatementDesignator(
                      DesignatorStatementEqual(
                        DesignatorIdent(
                         i
                        ) [DesignatorIdent]
                        Expretion(
                          Positive(
                          ) [Positive]
                          Term(
                            FNumber(
                             0
                            ) [FNumber]
                            FactorListNone(
                            ) [FactorListNone]
                          ) [Term]
                          AddopTermNone(
                          ) [AddopTermNone]
                        ) [Expretion]
                      ) [DesignatorStatementEqual]
                    ) [StatementDesignator]
                    StmtList(
                      StatementWhile(
                        Condition(
                          ConditionTerm(
                            ConditionFactRel(
                              Expretion(
                                Positive(
                                ) [Positive]
                                Term(
                                  FDesignator(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [FDesignator]
                                  FactorListNone(
                                  ) [FactorListNone]
                                ) [Term]
                                AddopTermNone(
                                ) [AddopTermNone]
                              ) [Expretion]
                              LessOp(
                              ) [LessOp]
                              Expretion(
                                Positive(
                                ) [Positive]
                                Term(
                                  FNumber(
                                   5
                                  ) [FNumber]
                                  FactorListNone(
                                  ) [FactorListNone]
                                ) [Term]
                                AddopTermNone(
                                ) [AddopTermNone]
                              ) [Expretion]
                            ) [ConditionFactRel]
                            CondFactNone(
                            ) [CondFactNone]
                          ) [ConditionTerm]
                          CondTermNone(
                          ) [CondTermNone]
                        ) [Condition]
                        Statements(
                          StatementListElements(
                            StatementIf(
                              IfStmnt(
                                Condition(
                                  ConditionTerm(
                                    ConditionFactRel(
                                      Expretion(
                                        Positive(
                                        ) [Positive]
                                        Term(
                                          FDesignator(
                                            DesignatorIdent(
                                             i
                                            ) [DesignatorIdent]
                                          ) [FDesignator]
                                          FactorListNone(
                                          ) [FactorListNone]
                                        ) [Term]
                                        AddopTermNone(
                                        ) [AddopTermNone]
                                      ) [Expretion]
                                      EqualOp(
                                      ) [EqualOp]
                                      Expretion(
                                        Positive(
                                        ) [Positive]
                                        Term(
                                          FNumber(
                                           2
                                          ) [FNumber]
                                          FactorListNone(
                                          ) [FactorListNone]
                                        ) [Term]
                                        AddopTermNone(
                                        ) [AddopTermNone]
                                      ) [Expretion]
                                    ) [ConditionFactRel]
                                    CondFactNone(
                                    ) [CondFactNone]
                                  ) [ConditionTerm]
                                  CondTermNone(
                                  ) [CondTermNone]
                                ) [Condition]
                                NoElse(
                                ) [NoElse]
                              ) [IfStmnt]
                            ) [StatementIf]
                            StatementListElements(
                              StatementDesignator(
                                DesignatorStatementEqual(
                                  DesignatorIdent(
                                   ibool
                                  ) [DesignatorIdent]
                                  Expretion(
                                    Positive(
                                    ) [Positive]
                                    Term(
                                      FDesignator(
                                        DesignatorIdent(
                                         true
                                        ) [DesignatorIdent]
                                      ) [FDesignator]
                                      FactorListNone(
                                      ) [FactorListNone]
                                    ) [Term]
                                    AddopTermNone(
                                    ) [AddopTermNone]
                                  ) [Expretion]
                                ) [DesignatorStatementEqual]
                              ) [StatementDesignator]
                              StatementListElements(
                                StatementDesignator(
                                  DesignatorStatementInc(
                                    DesignatorIdent(
                                     i
                                    ) [DesignatorIdent]
                                  ) [DesignatorStatementInc]
                                ) [StatementDesignator]
                                StatementNone(
                                ) [StatementNone]
                              ) [StatementListElements]
                            ) [StatementListElements]
                          ) [StatementListElements]
                        ) [Statements]
                      ) [StatementWhile]
                      StmtList(
                        StatementIf(
                          IfStmnt(
                            Condition(
                              ConditionTerm(
                                ConditionFact(
                                  Expretion(
                                    Positive(
                                    ) [Positive]
                                    Term(
                                      FDesignator(
                                        DesignatorIdent(
                                         ibool
                                        ) [DesignatorIdent]
                                      ) [FDesignator]
                                      FactorListNone(
                                      ) [FactorListNone]
                                    ) [Term]
                                    AddopTermNone(
                                    ) [AddopTermNone]
                                  ) [Expretion]
                                ) [ConditionFact]
                                CondFactNone(
                                ) [CondFactNone]
                              ) [ConditionTerm]
                              CondTermNone(
                              ) [CondTermNone]
                            ) [Condition]
                            NoElse(
                            ) [NoElse]
                          ) [IfStmnt]
                        ) [StatementIf]
                        StmtList(
                          StatementIf(
                            IfStmnt(
                              Condition(
                                ConditionTerm(
                                  ConditionFactRel(
                                    Expretion(
                                      Positive(
                                      ) [Positive]
                                      Term(
                                        FDesignator(
                                          DesignatorIdent(
                                           i
                                          ) [DesignatorIdent]
                                        ) [FDesignator]
                                        FactorListNone(
                                        ) [FactorListNone]
                                      ) [Term]
                                      AddopTermNone(
                                      ) [AddopTermNone]
                                    ) [Expretion]
                                    EqualOp(
                                    ) [EqualOp]
                                    Expretion(
                                      Positive(
                                      ) [Positive]
                                      Term(
                                        FNumber(
                                         5
                                        ) [FNumber]
                                        FactorListNone(
                                        ) [FactorListNone]
                                      ) [Term]
                                      AddopTermNone(
                                      ) [AddopTermNone]
                                    ) [Expretion]
                                  ) [ConditionFactRel]
                                  CondFactNone(
                                  ) [CondFactNone]
                                ) [ConditionTerm]
                                CondTermNone(
                                ) [CondTermNone]
                              ) [Condition]
                              NoElse(
                              ) [NoElse]
                            ) [IfStmnt]
                          ) [StatementIf]
                          StmtList(
                            StatementPrint(
                              Expretion(
                                Positive(
                                ) [Positive]
                                Term(
                                  FNumber(
                                   1
                                  ) [FNumber]
                                  FactorListNone(
                                  ) [FactorListNone]
                                ) [Term]
                                AddopTermNone(
                                ) [AddopTermNone]
                              ) [Expretion]
                              NoNumber(
                              ) [NoNumber]
                            ) [StatementPrint]
                            StmtList(
                              StatementDesignator(
                                DesignatorStatementEqual(
                                  DesignatorIdent(
                                   a
                                  ) [DesignatorIdent]
                                  Expretion(
                                    Positive(
                                    ) [Positive]
                                    Term(
                                      FNumber(
                                       2
                                      ) [FNumber]
                                      FactorListNone(
                                      ) [FactorListNone]
                                    ) [Term]
                                    AddopTermNone(
                                    ) [AddopTermNone]
                                  ) [Expretion]
                                ) [DesignatorStatementEqual]
                              ) [StatementDesignator]
                              StmtList(
                                StatementDesignator(
                                  DesignatorStatementEqual(
                                    DesignatorIdent(
                                     niz
                                    ) [DesignatorIdent]
                                    Expretion(
                                      Positive(
                                      ) [Positive]
                                      Term(
                                        FNew(
                                          Type(
                                           int
                                          ) [Type]
                                          Expretion(
                                            Positive(
                                            ) [Positive]
                                            Term(
                                              FNumber(
                                               3
                                              ) [FNumber]
                                              FactorListNone(
                                              ) [FactorListNone]
                                            ) [Term]
                                            AddopTermNone(
                                            ) [AddopTermNone]
                                          ) [Expretion]
                                        ) [FNew]
                                        FactorListNone(
                                        ) [FactorListNone]
                                      ) [Term]
                                      AddopTermNone(
                                      ) [AddopTermNone]
                                    ) [Expretion]
                                  ) [DesignatorStatementEqual]
                                ) [StatementDesignator]
                                StmtList(
                                  StatementDesignator(
                                    DesignatorStatementEqual(
                                      DesignatorArray(
                                       niz
                                        Expretion(
                                          Positive(
                                          ) [Positive]
                                          Term(
                                            FNumber(
                                             0
                                            ) [FNumber]
                                            FactorListNone(
                                            ) [FactorListNone]
                                          ) [Term]
                                          AddopTermNone(
                                          ) [AddopTermNone]
                                        ) [Expretion]
                                      ) [DesignatorArray]
                                      Expretion(
                                        Positive(
                                        ) [Positive]
                                        Term(
                                          FNumber(
                                           1
                                          ) [FNumber]
                                          FactorListMulop(
                                            MultiplyOp(
                                            ) [MultiplyOp]
                                            FDesignator(
                                              DesignatorIdent(
                                               a
                                              ) [DesignatorIdent]
                                            ) [FDesignator]
                                            FactorListNone(
                                            ) [FactorListNone]
                                          ) [FactorListMulop]
                                        ) [Term]
                                        AddopTermNone(
                                        ) [AddopTermNone]
                                      ) [Expretion]
                                    ) [DesignatorStatementEqual]
                                  ) [StatementDesignator]
                                  StmtList(
                                    StatementDesignator(
                                      DesignatorStatementEqual(
                                        DesignatorArray(
                                         niz
                                          Expretion(
                                            Positive(
                                            ) [Positive]
                                            Term(
                                              FNumber(
                                               1
                                              ) [FNumber]
                                              FactorListNone(
                                              ) [FactorListNone]
                                            ) [Term]
                                            AddopTermNone(
                                            ) [AddopTermNone]
                                          ) [Expretion]
                                        ) [DesignatorArray]
                                        Expretion(
                                          Positive(
                                          ) [Positive]
                                          Term(
                                            FNumber(
                                             2
                                            ) [FNumber]
                                            FactorListMulop(
                                              MultiplyOp(
                                              ) [MultiplyOp]
                                              FDesignator(
                                                DesignatorIdent(
                                                 a
                                                ) [DesignatorIdent]
                                              ) [FDesignator]
                                              FactorListNone(
                                              ) [FactorListNone]
                                            ) [FactorListMulop]
                                          ) [Term]
                                          AddopTermNone(
                                          ) [AddopTermNone]
                                        ) [Expretion]
                                      ) [DesignatorStatementEqual]
                                    ) [StatementDesignator]
                                    StmtList(
                                      StatementDesignator(
                                        DesignatorStatementEqual(
                                          DesignatorArray(
                                           niz
                                            Expretion(
                                              Positive(
                                              ) [Positive]
                                              Term(
                                                FNumber(
                                                 2
                                                ) [FNumber]
                                                FactorListNone(
                                                ) [FactorListNone]
                                              ) [Term]
                                              AddopTermNone(
                                              ) [AddopTermNone]
                                            ) [Expretion]
                                          ) [DesignatorArray]
                                          Expretion(
                                            Positive(
                                            ) [Positive]
                                            Term(
                                              FFunction(
                                                DesignatorIdent(
                                                 sum
                                                ) [DesignatorIdent]
                                                ActParsOneOne(
                                                  ActPars(
                                                    Expretion(
                                                      Positive(
                                                      ) [Positive]
                                                      Term(
                                                        FDesignator(
                                                          DesignatorArray(
                                                           niz
                                                            Expretion(
                                                              Positive(
                                                              ) [Positive]
                                                              Term(
                                                                FNumber(
                                                                 1
                                                                ) [FNumber]
                                                                FactorListNone(
                                                                ) [FactorListNone]
                                                              ) [Term]
                                                              AddopTermNone(
                                                              ) [AddopTermNone]
                                                            ) [Expretion]
                                                          ) [DesignatorArray]
                                                        ) [FDesignator]
                                                        FactorListNone(
                                                        ) [FactorListNone]
                                                      ) [Term]
                                                      AddopTermNone(
                                                      ) [AddopTermNone]
                                                    ) [Expretion]
                                                    ExpretionList(
                                                      Expretion(
                                                        Positive(
                                                        ) [Positive]
                                                        Term(
                                                          FDesignator(
                                                            DesignatorArray(
                                                             niz
                                                              Expretion(
                                                                Positive(
                                                                ) [Positive]
                                                                Term(
                                                                  FNumber(
                                                                   0
                                                                  ) [FNumber]
                                                                  FactorListNone(
                                                                  ) [FactorListNone]
                                                                ) [Term]
                                                                AddopTermNone(
                                                                ) [AddopTermNone]
                                                              ) [Expretion]
                                                            ) [DesignatorArray]
                                                          ) [FDesignator]
                                                          FactorListNone(
                                                          ) [FactorListNone]
                                                        ) [Term]
                                                        AddopTermNone(
                                                        ) [AddopTermNone]
                                                      ) [Expretion]
                                                      ExpresionListNone(
                                                      ) [ExpresionListNone]
                                                    ) [ExpretionList]
                                                  ) [ActPars]
                                                ) [ActParsOneOne]
                                              ) [FFunction]
                                              FactorListMulop(
                                                MultiplyOp(
                                                ) [MultiplyOp]
                                                FDesignator(
                                                  DesignatorIdent(
                                                   a
                                                  ) [DesignatorIdent]
                                                ) [FDesignator]
                                                FactorListNone(
                                                ) [FactorListNone]
                                              ) [FactorListMulop]
                                            ) [Term]
                                            AddopTerms(
                                              PlusOp(
                                              ) [PlusOp]
                                              Term(
                                                FNumber(
                                                 1
                                                ) [FNumber]
                                                FactorListNone(
                                                ) [FactorListNone]
                                              ) [Term]
                                              AddopTermNone(
                                              ) [AddopTermNone]
                                            ) [AddopTerms]
                                          ) [Expretion]
                                        ) [DesignatorStatementEqual]
                                      ) [StatementDesignator]
                                      StmtList(
                                        StatementPrint(
                                          Expretion(
                                            Positive(
                                            ) [Positive]
                                            Term(
                                              FDesignator(
                                                DesignatorIdent(
                                                 eol
                                                ) [DesignatorIdent]
                                              ) [FDesignator]
                                              FactorListNone(
                                              ) [FactorListNone]
                                            ) [Term]
                                            AddopTermNone(
                                            ) [AddopTermNone]
                                          ) [Expretion]
                                          NoNumber(
                                          ) [NoNumber]
                                        ) [StatementPrint]
                                        StmtList(
                                          StatementDesignator(
                                            DesignatorStatementEqual(
                                              DesignatorIdent(
                                               i
                                              ) [DesignatorIdent]
                                              Expretion(
                                                Positive(
                                                ) [Positive]
                                                Term(
                                                  FNumber(
                                                   0
                                                  ) [FNumber]
                                                  FactorListNone(
                                                  ) [FactorListNone]
                                                ) [Term]
                                                AddopTermNone(
                                                ) [AddopTermNone]
                                              ) [Expretion]
                                            ) [DesignatorStatementEqual]
                                          ) [StatementDesignator]
                                          StmtList(
                                            StatementWhile(
                                              Condition(
                                                ConditionTerm(
                                                  ConditionFactRel(
                                                    Expretion(
                                                      Positive(
                                                      ) [Positive]
                                                      Term(
                                                        FDesignator(
                                                          DesignatorIdent(
                                                           i
                                                          ) [DesignatorIdent]
                                                        ) [FDesignator]
                                                        FactorListNone(
                                                        ) [FactorListNone]
                                                      ) [Term]
                                                      AddopTermNone(
                                                      ) [AddopTermNone]
                                                    ) [Expretion]
                                                    LessOp(
                                                    ) [LessOp]
                                                    Expretion(
                                                      Positive(
                                                      ) [Positive]
                                                      Term(
                                                        FNumber(
                                                         10
                                                        ) [FNumber]
                                                        FactorListNone(
                                                        ) [FactorListNone]
                                                      ) [Term]
                                                      AddopTermNone(
                                                      ) [AddopTermNone]
                                                    ) [Expretion]
                                                  ) [ConditionFactRel]
                                                  CondFactNone(
                                                  ) [CondFactNone]
                                                ) [ConditionTerm]
                                                CondTermNone(
                                                ) [CondTermNone]
                                              ) [Condition]
                                              Statements(
                                                StatementListElements(
                                                  StatementIf(
                                                    IfStmnt(
                                                      Condition(
                                                        ConditionTerm(
                                                          ConditionFactRel(
                                                            Expretion(
                                                              Positive(
                                                              ) [Positive]
                                                              Term(
                                                                FDesignator(
                                                                  DesignatorIdent(
                                                                   i
                                                                  ) [DesignatorIdent]
                                                                ) [FDesignator]
                                                                FactorListNone(
                                                                ) [FactorListNone]
                                                              ) [Term]
                                                              AddopTermNone(
                                                              ) [AddopTermNone]
                                                            ) [Expretion]
                                                            EqualOp(
                                                            ) [EqualOp]
                                                            Expretion(
                                                              Positive(
                                                              ) [Positive]
                                                              Term(
                                                                FNumber(
                                                                 3
                                                                ) [FNumber]
                                                                FactorListNone(
                                                                ) [FactorListNone]
                                                              ) [Term]
                                                              AddopTermNone(
                                                              ) [AddopTermNone]
                                                            ) [Expretion]
                                                          ) [ConditionFactRel]
                                                          CondFactNone(
                                                          ) [CondFactNone]
                                                        ) [ConditionTerm]
                                                        CondTermNone(
                                                        ) [CondTermNone]
                                                      ) [Condition]
                                                      NoElse(
                                                      ) [NoElse]
                                                    ) [IfStmnt]
                                                  ) [StatementIf]
                                                  StatementListElements(
                                                    Statements(
                                                      StatementListElements(
                                                        StatementDesignator(
                                                          DesignatorStatementInc(
                                                            DesignatorIdent(
                                                             i
                                                            ) [DesignatorIdent]
                                                          ) [DesignatorStatementInc]
                                                        ) [StatementDesignator]
                                                        StatementListElements(
                                                          StatementContinue(
                                                          ) [StatementContinue]
                                                          StatementNone(
                                                          ) [StatementNone]
                                                        ) [StatementListElements]
                                                      ) [StatementListElements]
                                                    ) [Statements]
                                                    StatementListElements(
                                                      StatementIf(
                                                        IfStmnt(
                                                          Condition(
                                                            ConditionTerm(
                                                              ConditionFactRel(
                                                                Expretion(
                                                                  Positive(
                                                                  ) [Positive]
                                                                  Term(
                                                                    FDesignator(
                                                                      DesignatorIdent(
                                                                       i
                                                                      ) [DesignatorIdent]
                                                                    ) [FDesignator]
                                                                    FactorListNone(
                                                                    ) [FactorListNone]
                                                                  ) [Term]
                                                                  AddopTermNone(
                                                                  ) [AddopTermNone]
                                                                ) [Expretion]
                                                                EqualOp(
                                                                ) [EqualOp]
                                                                Expretion(
                                                                  Positive(
                                                                  ) [Positive]
                                                                  Term(
                                                                    FNumber(
                                                                     4
                                                                    ) [FNumber]
                                                                    FactorListNone(
                                                                    ) [FactorListNone]
                                                                  ) [Term]
                                                                  AddopTermNone(
                                                                  ) [AddopTermNone]
                                                                ) [Expretion]
                                                              ) [ConditionFactRel]
                                                              CondFactNone(
                                                              ) [CondFactNone]
                                                            ) [ConditionTerm]
                                                            CondTermNone(
                                                            ) [CondTermNone]
                                                          ) [Condition]
                                                          NoElse(
                                                          ) [NoElse]
                                                        ) [IfStmnt]
                                                      ) [StatementIf]
                                                      StatementListElements(
                                                        StatementBreak(
                                                        ) [StatementBreak]
                                                        StatementListElements(
                                                          StatementDesignator(
                                                            DesignatorStatementEqual(
                                                              DesignatorIdent(
                                                               i
                                                              ) [DesignatorIdent]
                                                              Expretion(
                                                                Positive(
                                                                ) [Positive]
                                                                Term(
                                                                  FFunction(
                                                                    DesignatorIdent(
                                                                     inkrement
                                                                    ) [DesignatorIdent]
                                                                    ActParsOneOne(
                                                                      ActPars(
                                                                        Expretion(
                                                                          Positive(
                                                                          ) [Positive]
                                                                          Term(
                                                                            FDesignator(
                                                                              DesignatorIdent(
                                                                               i
                                                                              ) [DesignatorIdent]
                                                                            ) [FDesignator]
                                                                            FactorListNone(
                                                                            ) [FactorListNone]
                                                                          ) [Term]
                                                                          AddopTermNone(
                                                                          ) [AddopTermNone]
                                                                        ) [Expretion]
                                                                        ExpretionList(
                                                                          Expretion(
                                                                            Positive(
                                                                            ) [Positive]
                                                                            Term(
                                                                              FNumber(
                                                                               1
                                                                              ) [FNumber]
                                                                              FactorListNone(
                                                                              ) [FactorListNone]
                                                                            ) [Term]
                                                                            AddopTermNone(
                                                                            ) [AddopTermNone]
                                                                          ) [Expretion]
                                                                          ExpresionListNone(
                                                                          ) [ExpresionListNone]
                                                                        ) [ExpretionList]
                                                                      ) [ActPars]
                                                                    ) [ActParsOneOne]
                                                                  ) [FFunction]
                                                                  FactorListNone(
                                                                  ) [FactorListNone]
                                                                ) [Term]
                                                                AddopTermNone(
                                                                ) [AddopTermNone]
                                                              ) [Expretion]
                                                            ) [DesignatorStatementEqual]
                                                          ) [StatementDesignator]
                                                          StatementNone(
                                                          ) [StatementNone]
                                                        ) [StatementListElements]
                                                      ) [StatementListElements]
                                                    ) [StatementListElements]
                                                  ) [StatementListElements]
                                                ) [StatementListElements]
                                              ) [Statements]
                                            ) [StatementWhile]
                                            StmtList(
                                              StatementIf(
                                                IfStmnt(
                                                  Condition(
                                                    ConditionTerm(
                                                      ConditionFactRel(
                                                        Expretion(
                                                          Positive(
                                                          ) [Positive]
                                                          Term(
                                                            FDesignator(
                                                              DesignatorIdent(
                                                               i
                                                              ) [DesignatorIdent]
                                                            ) [FDesignator]
                                                            FactorListNone(
                                                            ) [FactorListNone]
                                                          ) [Term]
                                                          AddopTermNone(
                                                          ) [AddopTermNone]
                                                        ) [Expretion]
                                                        EqualOp(
                                                        ) [EqualOp]
                                                        Expretion(
                                                          Positive(
                                                          ) [Positive]
                                                          Term(
                                                            FNumber(
                                                             3
                                                            ) [FNumber]
                                                            FactorListNone(
                                                            ) [FactorListNone]
                                                          ) [Term]
                                                          AddopTermNone(
                                                          ) [AddopTermNone]
                                                        ) [Expretion]
                                                      ) [ConditionFactRel]
                                                      ConditionFactList(
                                                        ConditionFact(
                                                          Expretion(
                                                            Positive(
                                                            ) [Positive]
                                                            Term(
                                                              FFunction(
                                                                DesignatorIdent(
                                                                 verify
                                                                ) [DesignatorIdent]
                                                                ActParsNone(
                                                                ) [ActParsNone]
                                                              ) [FFunction]
                                                              FactorListNone(
                                                              ) [FactorListNone]
                                                            ) [Term]
                                                            AddopTermNone(
                                                            ) [AddopTermNone]
                                                          ) [Expretion]
                                                        ) [ConditionFact]
                                                        CondFactNone(
                                                        ) [CondFactNone]
                                                      ) [ConditionFactList]
                                                    ) [ConditionTerm]
                                                    CondTermNone(
                                                    ) [CondTermNone]
                                                  ) [Condition]
                                                  NoElse(
                                                  ) [NoElse]
                                                ) [IfStmnt]
                                              ) [StatementIf]
                                              StmtList(
                                                StatementPrint(
                                                  Expretion(
                                                    Negative(
                                                    ) [Negative]
                                                    Term(
                                                      FNumber(
                                                       4
                                                      ) [FNumber]
                                                      FactorListNone(
                                                      ) [FactorListNone]
                                                    ) [Term]
                                                    AddopTermNone(
                                                    ) [AddopTermNone]
                                                  ) [Expretion]
                                                  NoNumber(
                                                  ) [NoNumber]
                                                ) [StatementPrint]
                                                StmtList(
                                                  StatementRead(
                                                    DesignatorArray(
                                                     niz
                                                      Expretion(
                                                        Positive(
                                                        ) [Positive]
                                                        Term(
                                                          FNumber(
                                                           0
                                                          ) [FNumber]
                                                          FactorListNone(
                                                          ) [FactorListNone]
                                                        ) [Term]
                                                        AddopTermNone(
                                                        ) [AddopTermNone]
                                                      ) [Expretion]
                                                    ) [DesignatorArray]
                                                  ) [StatementRead]
                                                  StmtList(
                                                    StatementRead(
                                                      DesignatorArray(
                                                       niz
                                                        Expretion(
                                                          Positive(
                                                          ) [Positive]
                                                          Term(
                                                            FNumber(
                                                             1
                                                            ) [FNumber]
                                                            FactorListNone(
                                                            ) [FactorListNone]
                                                          ) [Term]
                                                          AddopTermNone(
                                                          ) [AddopTermNone]
                                                        ) [Expretion]
                                                      ) [DesignatorArray]
                                                    ) [StatementRead]
                                                    StmtList(
                                                      StatementRead(
                                                        DesignatorArray(
                                                         niz
                                                          Expretion(
                                                            Positive(
                                                            ) [Positive]
                                                            Term(
                                                              FNumber(
                                                               2
                                                              ) [FNumber]
                                                              FactorListNone(
                                                              ) [FactorListNone]
                                                            ) [Term]
                                                            AddopTermNone(
                                                            ) [AddopTermNone]
                                                          ) [Expretion]
                                                        ) [DesignatorArray]
                                                      ) [StatementRead]
                                                      StmtList(
                                                        StatementPrint(
                                                          Expretion(
                                                            Positive(
                                                            ) [Positive]
                                                            Term(
                                                              FDesignator(
                                                                DesignatorIdent(
                                                                 eol
                                                                ) [DesignatorIdent]
                                                              ) [FDesignator]
                                                              FactorListNone(
                                                              ) [FactorListNone]
                                                            ) [Term]
                                                            AddopTermNone(
                                                            ) [AddopTermNone]
                                                          ) [Expretion]
                                                          NoNumber(
                                                          ) [NoNumber]
                                                        ) [StatementPrint]
                                                        StmtList(
                                                          StatementPrint(
                                                            Expretion(
                                                              Positive(
                                                              ) [Positive]
                                                              Term(
                                                                FFunction(
                                                                  DesignatorIdent(
                                                                   sum
                                                                  ) [DesignatorIdent]
                                                                  ActParsOneOne(
                                                                    ActPars(
                                                                      Expretion(
                                                                        Positive(
                                                                        ) [Positive]
                                                                        Term(
                                                                          FFunction(
                                                                            DesignatorIdent(
                                                                             sum
                                                                            ) [DesignatorIdent]
                                                                            ActParsOneOne(
                                                                              ActPars(
                                                                                Expretion(
                                                                                  Positive(
                                                                                  ) [Positive]
                                                                                  Term(
                                                                                    FDesignator(
                                                                                      DesignatorArray(
                                                                                       niz
                                                                                        Expretion(
                                                                                          Positive(
                                                                                          ) [Positive]
                                                                                          Term(
                                                                                            FNumber(
                                                                                             0
                                                                                            ) [FNumber]
                                                                                            FactorListNone(
                                                                                            ) [FactorListNone]
                                                                                          ) [Term]
                                                                                          AddopTermNone(
                                                                                          ) [AddopTermNone]
                                                                                        ) [Expretion]
                                                                                      ) [DesignatorArray]
                                                                                    ) [FDesignator]
                                                                                    FactorListNone(
                                                                                    ) [FactorListNone]
                                                                                  ) [Term]
                                                                                  AddopTermNone(
                                                                                  ) [AddopTermNone]
                                                                                ) [Expretion]
                                                                                ExpretionList(
                                                                                  Expretion(
                                                                                    Positive(
                                                                                    ) [Positive]
                                                                                    Term(
                                                                                      FDesignator(
                                                                                        DesignatorArray(
                                                                                         niz
                                                                                          Expretion(
                                                                                            Positive(
                                                                                            ) [Positive]
                                                                                            Term(
                                                                                              FNumber(
                                                                                               1
                                                                                              ) [FNumber]
                                                                                              FactorListNone(
                                                                                              ) [FactorListNone]
                                                                                            ) [Term]
                                                                                            AddopTermNone(
                                                                                            ) [AddopTermNone]
                                                                                          ) [Expretion]
                                                                                        ) [DesignatorArray]
                                                                                      ) [FDesignator]
                                                                                      FactorListNone(
                                                                                      ) [FactorListNone]
                                                                                    ) [Term]
                                                                                    AddopTermNone(
                                                                                    ) [AddopTermNone]
                                                                                  ) [Expretion]
                                                                                  ExpresionListNone(
                                                                                  ) [ExpresionListNone]
                                                                                ) [ExpretionList]
                                                                              ) [ActPars]
                                                                            ) [ActParsOneOne]
                                                                          ) [FFunction]
                                                                          FactorListNone(
                                                                          ) [FactorListNone]
                                                                        ) [Term]
                                                                        AddopTermNone(
                                                                        ) [AddopTermNone]
                                                                      ) [Expretion]
                                                                      ExpretionList(
                                                                        Expretion(
                                                                          Positive(
                                                                          ) [Positive]
                                                                          Term(
                                                                            FDesignator(
                                                                              DesignatorArray(
                                                                               niz
                                                                                Expretion(
                                                                                  Positive(
                                                                                  ) [Positive]
                                                                                  Term(
                                                                                    FNumber(
                                                                                     2
                                                                                    ) [FNumber]
                                                                                    FactorListNone(
                                                                                    ) [FactorListNone]
                                                                                  ) [Term]
                                                                                  AddopTermNone(
                                                                                  ) [AddopTermNone]
                                                                                ) [Expretion]
                                                                              ) [DesignatorArray]
                                                                            ) [FDesignator]
                                                                            FactorListNone(
                                                                            ) [FactorListNone]
                                                                          ) [Term]
                                                                          AddopTermNone(
                                                                          ) [AddopTermNone]
                                                                        ) [Expretion]
                                                                        ExpresionListNone(
                                                                        ) [ExpresionListNone]
                                                                      ) [ExpretionList]
                                                                    ) [ActPars]
                                                                  ) [ActParsOneOne]
                                                                ) [FFunction]
                                                                FactorListNone(
                                                                ) [FactorListNone]
                                                              ) [Term]
                                                              AddopTermNone(
                                                              ) [AddopTermNone]
                                                            ) [Expretion]
                                                            NoNumber(
                                                            ) [NoNumber]
                                                          ) [StatementPrint]
                                                          StmtList(
                                                            StatementPrint(
                                                              Expretion(
                                                                Positive(
                                                                ) [Positive]
                                                                Term(
                                                                  FDesignator(
                                                                    DesignatorIdent(
                                                                     eol
                                                                    ) [DesignatorIdent]
                                                                  ) [FDesignator]
                                                                  FactorListNone(
                                                                  ) [FactorListNone]
                                                                ) [Term]
                                                                AddopTermNone(
                                                                ) [AddopTermNone]
                                                              ) [Expretion]
                                                              NoNumber(
                                                              ) [NoNumber]
                                                            ) [StatementPrint]
                                                            StmtList(
                                                              StatementPrint(
                                                                Expretion(
                                                                  Positive(
                                                                  ) [Positive]
                                                                  Term(
                                                                    FFunction(
                                                                      DesignatorIdent(
                                                                       inkrement
                                                                      ) [DesignatorIdent]
                                                                      ActParsOneOne(
                                                                        ActPars(
                                                                          Expretion(
                                                                            Positive(
                                                                            ) [Positive]
                                                                            Term(
                                                                              FDesignator(
                                                                                DesignatorArray(
                                                                                 niz
                                                                                  Expretion(
                                                                                    Positive(
                                                                                    ) [Positive]
                                                                                    Term(
                                                                                      FNumber(
                                                                                       2
                                                                                      ) [FNumber]
                                                                                      FactorListNone(
                                                                                      ) [FactorListNone]
                                                                                    ) [Term]
                                                                                    AddopTermNone(
                                                                                    ) [AddopTermNone]
                                                                                  ) [Expretion]
                                                                                ) [DesignatorArray]
                                                                              ) [FDesignator]
                                                                              FactorListNone(
                                                                              ) [FactorListNone]
                                                                            ) [Term]
                                                                            AddopTermNone(
                                                                            ) [AddopTermNone]
                                                                          ) [Expretion]
                                                                          ExpretionList(
                                                                            Expretion(
                                                                              Positive(
                                                                              ) [Positive]
                                                                              Term(
                                                                                FNumber(
                                                                                 2
                                                                                ) [FNumber]
                                                                                FactorListNone(
                                                                                ) [FactorListNone]
                                                                              ) [Term]
                                                                              AddopTermNone(
                                                                              ) [AddopTermNone]
                                                                            ) [Expretion]
                                                                            ExpresionListNone(
                                                                            ) [ExpresionListNone]
                                                                          ) [ExpretionList]
                                                                        ) [ActPars]
                                                                      ) [ActParsOneOne]
                                                                    ) [FFunction]
                                                                    FactorListNone(
                                                                    ) [FactorListNone]
                                                                  ) [Term]
                                                                  AddopTermNone(
                                                                  ) [AddopTermNone]
                                                                ) [Expretion]
                                                                NoNumber(
                                                                ) [NoNumber]
                                                              ) [StatementPrint]
                                                              StmtList(
                                                                StatementDesignator(
                                                                  DesignatorStatementEqual(
                                                                    DesignatorIdent(
                                                                     a
                                                                    ) [DesignatorIdent]
                                                                    Expretion(
                                                                      Positive(
                                                                      ) [Positive]
                                                                      Term(
                                                                        FNumber(
                                                                         3
                                                                        ) [FNumber]
                                                                        FactorListNone(
                                                                        ) [FactorListNone]
                                                                      ) [Term]
                                                                      AddopTermNone(
                                                                      ) [AddopTermNone]
                                                                    ) [Expretion]
                                                                  ) [DesignatorStatementEqual]
                                                                ) [StatementDesignator]
                                                                StmtList(
                                                                  StatementDesignator(
                                                                    DesignatorStatementEqual(
                                                                      DesignatorIdent(
                                                                       i
                                                                      ) [DesignatorIdent]
                                                                      Expretion(
                                                                        Positive(
                                                                        ) [Positive]
                                                                        Term(
                                                                          FNumber(
                                                                           0
                                                                          ) [FNumber]
                                                                          FactorListNone(
                                                                          ) [FactorListNone]
                                                                        ) [Term]
                                                                        AddopTermNone(
                                                                        ) [AddopTermNone]
                                                                      ) [Expretion]
                                                                    ) [DesignatorStatementEqual]
                                                                  ) [StatementDesignator]
                                                                  StmtList(
                                                                    StatementWhile(
                                                                      Condition(
                                                                        ConditionTerm(
                                                                          ConditionFactRel(
                                                                            Expretion(
                                                                              Positive(
                                                                              ) [Positive]
                                                                              Term(
                                                                                FDesignator(
                                                                                  DesignatorIdent(
                                                                                   i
                                                                                  ) [DesignatorIdent]
                                                                                ) [FDesignator]
                                                                                FactorListNone(
                                                                                ) [FactorListNone]
                                                                              ) [Term]
                                                                              AddopTermNone(
                                                                              ) [AddopTermNone]
                                                                            ) [Expretion]
                                                                            LessOp(
                                                                            ) [LessOp]
                                                                            Expretion(
                                                                              Positive(
                                                                              ) [Positive]
                                                                              Term(
                                                                                FNumber(
                                                                                 3
                                                                                ) [FNumber]
                                                                                FactorListNone(
                                                                                ) [FactorListNone]
                                                                              ) [Term]
                                                                              AddopTermNone(
                                                                              ) [AddopTermNone]
                                                                            ) [Expretion]
                                                                          ) [ConditionFactRel]
                                                                          CondFactNone(
                                                                          ) [CondFactNone]
                                                                        ) [ConditionTerm]
                                                                        CondTermNone(
                                                                        ) [CondTermNone]
                                                                      ) [Condition]
                                                                      Statements(
                                                                        StatementListElements(
                                                                          StatementDesignator(
                                                                            DesignatorStatementEqual(
                                                                              DesignatorArray(
                                                                               niz
                                                                                Expretion(
                                                                                  Positive(
                                                                                  ) [Positive]
                                                                                  Term(
                                                                                    FDesignator(
                                                                                      DesignatorIdent(
                                                                                       i
                                                                                      ) [DesignatorIdent]
                                                                                    ) [FDesignator]
                                                                                    FactorListNone(
                                                                                    ) [FactorListNone]
                                                                                  ) [Term]
                                                                                  AddopTermNone(
                                                                                  ) [AddopTermNone]
                                                                                ) [Expretion]
                                                                              ) [DesignatorArray]
                                                                              Expretion(
                                                                                Positive(
                                                                                ) [Positive]
                                                                                Term(
                                                                                  FDesignator(
                                                                                    DesignatorArray(
                                                                                     niz
                                                                                      Expretion(
                                                                                        Positive(
                                                                                        ) [Positive]
                                                                                        Term(
                                                                                          FDesignator(
                                                                                            DesignatorIdent(
                                                                                             i
                                                                                            ) [DesignatorIdent]
                                                                                          ) [FDesignator]
                                                                                          FactorListNone(
                                                                                          ) [FactorListNone]
                                                                                        ) [Term]
                                                                                        AddopTermNone(
                                                                                        ) [AddopTermNone]
                                                                                      ) [Expretion]
                                                                                    ) [DesignatorArray]
                                                                                  ) [FDesignator]
                                                                                  FactorListMulop(
                                                                                    MultiplyOp(
                                                                                    ) [MultiplyOp]
                                                                                    FNumber(
                                                                                     2
                                                                                    ) [FNumber]
                                                                                    FactorListMulop(
                                                                                      MultiplyOp(
                                                                                      ) [MultiplyOp]
                                                                                      FDesignator(
                                                                                        DesignatorIdent(
                                                                                         a
                                                                                        ) [DesignatorIdent]
                                                                                      ) [FDesignator]
                                                                                      FactorListNone(
                                                                                      ) [FactorListNone]
                                                                                    ) [FactorListMulop]
                                                                                  ) [FactorListMulop]
                                                                                ) [Term]
                                                                                AddopTermNone(
                                                                                ) [AddopTermNone]
                                                                              ) [Expretion]
                                                                            ) [DesignatorStatementEqual]
                                                                          ) [StatementDesignator]
                                                                          StatementListElements(
                                                                            StatementDesignator(
                                                                              DesignatorStatementInc(
                                                                                DesignatorIdent(
                                                                                 i
                                                                                ) [DesignatorIdent]
                                                                              ) [DesignatorStatementInc]
                                                                            ) [StatementDesignator]
                                                                            StatementNone(
                                                                            ) [StatementNone]
                                                                          ) [StatementListElements]
                                                                        ) [StatementListElements]
                                                                      ) [Statements]
                                                                    ) [StatementWhile]
                                                                    StmtList(
                                                                      StatementForeach(
                                                                        DesignatorIdent(
                                                                         niz
                                                                        ) [DesignatorIdent]
                                                                       curr
                                                                        StatementPrint(
                                                                          Expretion(
                                                                            Positive(
                                                                            ) [Positive]
                                                                            Term(
                                                                              FDesignator(
                                                                                DesignatorIdent(
                                                                                 curr
                                                                                ) [DesignatorIdent]
                                                                              ) [FDesignator]
                                                                              FactorListNone(
                                                                              ) [FactorListNone]
                                                                            ) [Term]
                                                                            AddopTermNone(
                                                                            ) [AddopTermNone]
                                                                          ) [Expretion]
                                                                          NoNumber(
                                                                          ) [NoNumber]
                                                                        ) [StatementPrint]
                                                                      ) [StatementForeach]
                                                                      StmtList(
                                                                        StatementPrint(
                                                                          Expretion(
                                                                            Positive(
                                                                            ) [Positive]
                                                                            Term(
                                                                              FDesignator(
                                                                                DesignatorIdent(
                                                                                 eol
                                                                                ) [DesignatorIdent]
                                                                              ) [FDesignator]
                                                                              FactorListNone(
                                                                              ) [FactorListNone]
                                                                            ) [Term]
                                                                            AddopTermNone(
                                                                            ) [AddopTermNone]
                                                                          ) [Expretion]
                                                                          NoNumber(
                                                                          ) [NoNumber]
                                                                        ) [StatementPrint]
                                                                        StmtList(
                                                                          StatementDesignator(
                                                                            DesignatorStatementEqual(
                                                                              DesignatorIdent(
                                                                               niz2
                                                                              ) [DesignatorIdent]
                                                                              Expretion(
                                                                                Positive(
                                                                                ) [Positive]
                                                                                Term(
                                                                                  FNumber(
                                                                                   0
                                                                                  ) [FNumber]
                                                                                  FactorListNone(
                                                                                  ) [FactorListNone]
                                                                                ) [Term]
                                                                                AddopTermNone(
                                                                                ) [AddopTermNone]
                                                                              ) [Expretion]
                                                                            ) [DesignatorStatementEqual]
                                                                          ) [StatementDesignator]
                                                                          StmtList(
                                                                            StatementForeach(
                                                                              DesignatorIdent(
                                                                               niz
                                                                              ) [DesignatorIdent]
                                                                             curr
                                                                              Statements(
                                                                                StatementListElements(
                                                                                  StatementDesignator(
                                                                                    DesignatorStatementEqual(
                                                                                      DesignatorIdent(
                                                                                       niz2
                                                                                      ) [DesignatorIdent]
                                                                                      Expretion(
                                                                                        Positive(
                                                                                        ) [Positive]
                                                                                        Term(
                                                                                          FDesignator(
                                                                                            DesignatorIdent(
                                                                                             niz2
                                                                                            ) [DesignatorIdent]
                                                                                          ) [FDesignator]
                                                                                          FactorListNone(
                                                                                          ) [FactorListNone]
                                                                                        ) [Term]
                                                                                        AddopTerms(
                                                                                          PlusOp(
                                                                                          ) [PlusOp]
                                                                                          Term(
                                                                                            FDesignator(
                                                                                              DesignatorIdent(
                                                                                               curr
                                                                                              ) [DesignatorIdent]
                                                                                            ) [FDesignator]
                                                                                            FactorListMulop(
                                                                                              MultiplyOp(
                                                                                              ) [MultiplyOp]
                                                                                              FDesignator(
                                                                                                DesignatorIdent(
                                                                                                 curr
                                                                                                ) [DesignatorIdent]
                                                                                              ) [FDesignator]
                                                                                              FactorListNone(
                                                                                              ) [FactorListNone]
                                                                                            ) [FactorListMulop]
                                                                                          ) [Term]
                                                                                          AddopTermNone(
                                                                                          ) [AddopTermNone]
                                                                                        ) [AddopTerms]
                                                                                      ) [Expretion]
                                                                                    ) [DesignatorStatementEqual]
                                                                                  ) [StatementDesignator]
                                                                                  StatementNone(
                                                                                  ) [StatementNone]
                                                                                ) [StatementListElements]
                                                                              ) [Statements]
                                                                            ) [StatementForeach]
                                                                            StmtList(
                                                                              StatementPrint(
                                                                                Expretion(
                                                                                  Positive(
                                                                                  ) [Positive]
                                                                                  Term(
                                                                                    FDesignator(
                                                                                      DesignatorIdent(
                                                                                       niz2
                                                                                      ) [DesignatorIdent]
                                                                                    ) [FDesignator]
                                                                                    FactorListNone(
                                                                                    ) [FactorListNone]
                                                                                  ) [Term]
                                                                                  AddopTermNone(
                                                                                  ) [AddopTermNone]
                                                                                ) [Expretion]
                                                                                NoNumber(
                                                                                ) [NoNumber]
                                                                              ) [StatementPrint]
                                                                              NoStmt(
                                                                              ) [NoStmt]
                                                                            ) [StmtList]
                                                                          ) [StmtList]
                                                                        ) [StmtList]
                                                                      ) [StmtList]
                                                                    ) [StmtList]
                                                                  ) [StmtList]
                                                                ) [StmtList]
                                                              ) [StmtList]
                                                            ) [StmtList]
                                                          ) [StmtList]
                                                        ) [StmtList]
                                                      ) [StmtList]
                                                    ) [StmtList]
                                                  ) [StmtList]
                                                ) [StmtList]
                                              ) [StmtList]
                                            ) [StmtList]
                                          ) [StmtList]
                                        ) [StmtList]
                                      ) [StmtList]
                                    ) [StmtList]
                                  ) [StmtList]
                                ) [StmtList]
                              ) [StmtList]
                            ) [StmtList]
                          ) [StmtList]
                        ) [StmtList]
                      ) [StmtList]
                    ) [StmtList]
                  ) [StmtList]
                ) [StmtList]
              ) [StmtList]
            ) [StmtList]
          ) [MainFunction]
        ) [MethodDeclarationMain]
      ) [MethodDeclarations]
    ) [MethodDeclarations]
  ) [MethodDeclarations]
) [Program]
INFO  06:24:56,107 - ===================================
INFO  06:24:56,111 -  Print count calls = 11
INFO  06:24:56,111 -  Deklarisanih promenljivih ima = 0
INFO  06:57:03,692 - Compiling source file: D:\Caslav\Fakultet\PP1 - Programski Prevodioci 1\Domaci Zadatak\2. Sintaksna Analiza\Proba Njegovo\Izvorni kod\MJCompiler\test\program.mj
INFO  06:57:04,144 - #2 program
INFO  06:57:04,144 - #19 test302
INFO  06:57:04,144 - #15 const
INFO  06:57:04,144 - #19 int
INFO  06:57:04,144 - #19 jedan
INFO  06:57:04,145 - #21 =
INFO  06:57:04,145 - #16 1
INFO  06:57:04,147 - #23 ;
INFO  06:57:04,150 - #19 int
INFO  06:57:04,152 - #19 i
INFO  06:57:04,152 - #23 ;
INFO  06:57:04,167 - #19 bool
INFO  06:57:04,167 - #19 ibool
INFO  06:57:04,168 - #23 ;
INFO  06:57:04,168 - #19 int
INFO  06:57:04,168 - #19 niz2
INFO  06:57:04,168 - #23 ;
INFO  06:57:04,168 - #19 int
INFO  06:57:04,168 - #19 niz
INFO  06:57:04,169 - #28 [
INFO  06:57:04,169 - #29 ]
INFO  06:57:04,170 - #23 ;
INFO  06:57:04,170 - #19 int
INFO  06:57:04,170 - #19 a
INFO  06:57:04,170 - #22 ,
INFO  06:57:04,170 - #19 curr
INFO  06:57:04,171 - #23 ;
INFO  06:57:04,171 - #26 {
INFO  06:57:04,193 - #19 int
INFO  06:57:04,193 - #19 sum
INFO  06:57:04,193 - #24 (
INFO  06:57:04,193 - #19 int
INFO  06:57:04,193 - #19 z
INFO  06:57:04,193 - #22 ,
INFO  06:57:04,194 - #19 int
INFO  06:57:04,194 - #19 d
INFO  06:57:04,194 - #25 )
INFO  06:57:04,195 - #26 {
INFO  06:57:04,195 - #4 return
INFO  06:57:04,195 - #19 z
INFO  06:57:04,195 - #20 +
INFO  06:57:04,195 - #19 d
INFO  06:57:04,197 - #23 ;
INFO  06:57:04,198 - #27 }
INFO  06:57:04,204 - #19 int
INFO  06:57:04,204 - #19 inkrement
INFO  06:57:04,204 - #24 (
INFO  06:57:04,204 - #19 int
INFO  06:57:04,204 - #19 a
INFO  06:57:04,204 - #22 ,
INFO  06:57:04,204 - #19 int
INFO  06:57:04,204 - #19 inc
INFO  06:57:04,204 - #25 )
INFO  06:57:04,205 - #19 int
INFO  06:57:04,205 - #19 pom
INFO  06:57:04,205 - #23 ;
INFO  06:57:04,205 - #26 {
INFO  06:57:04,205 - #8 if
INFO  06:57:04,206 - #24 (
INFO  06:57:04,206 - #19 inc
INFO  06:57:04,206 - #39 ==
INFO  06:57:04,208 - #19 jedan
INFO  06:57:04,225 - #25 )
INFO  06:57:04,251 - #19 pom
INFO  06:57:04,271 - #21 =
INFO  06:57:04,271 - #16 1
INFO  06:57:04,271 - #23 ;
INFO  06:57:04,272 - #4 return
INFO  06:57:04,273 - #19 sum
INFO  06:57:04,273 - #24 (
INFO  06:57:04,273 - #19 a
INFO  06:57:04,273 - #22 ,
INFO  06:57:04,278 - #19 pom
INFO  06:57:04,278 - #25 )
INFO  06:57:04,299 - #23 ;
INFO  06:57:04,300 - #27 }
INFO  06:57:04,301 - #19 bool
INFO  06:57:04,301 - #19 verify
INFO  06:57:04,302 - #24 (
INFO  06:57:04,302 - #25 )
INFO  06:57:04,304 - #26 {
INFO  06:57:04,304 - #4 return
INFO  06:57:04,304 - #19 false
INFO  06:57:04,304 - #23 ;
INFO  06:57:04,304 - #27 }
INFO  06:57:04,304 - #19 void
INFO  06:57:04,304 - #14 main
INFO  06:57:04,304 - #24 (
INFO  06:57:04,304 - #25 )
INFO  06:57:04,305 - #26 {
INFO  06:57:04,305 - #8 if
INFO  06:57:04,305 - #24 (
INFO  06:57:04,305 - #16 1
INFO  06:57:04,305 - #40 !=
INFO  06:57:04,306 - #16 1
INFO  06:57:04,307 - #25 )
INFO  06:57:04,307 - #3 print
INFO  06:57:04,307 - #24 (
INFO  06:57:04,307 - #33 -
INFO  06:57:04,307 - #16 6
INFO  06:57:04,325 - #25 )
INFO  06:57:04,326 - #23 ;
INFO  06:57:04,327 - #19 ibool
INFO  06:57:04,327 - #21 =
INFO  06:57:04,327 - #19 false
INFO  06:57:04,327 - #23 ;
INFO  06:57:04,327 - #19 i
INFO  06:57:04,327 - #21 =
INFO  06:57:04,327 - #16 0
INFO  06:57:04,327 - #23 ;
INFO  06:57:04,327 - #7 while
INFO  06:57:04,327 - #24 (
INFO  06:57:04,327 - #19 i
INFO  06:57:04,328 - #35 <
INFO  06:57:04,328 - #16 5
INFO  06:57:04,329 - #25 )
INFO  06:57:04,329 - #26 {
INFO  06:57:04,329 - #8 if
INFO  06:57:04,329 - #24 (
INFO  06:57:04,329 - #19 i
INFO  06:57:04,330 - #39 ==
INFO  06:57:04,330 - #16 2
INFO  06:57:04,330 - #25 )
INFO  06:57:04,331 - #19 ibool
INFO  06:57:04,331 - #21 =
INFO  06:57:04,331 - #19 true
INFO  06:57:04,331 - #23 ;
INFO  06:57:04,331 - #19 i
INFO  06:57:04,331 - #44 ++
INFO  06:57:04,333 - #23 ;
INFO  06:57:04,333 - #27 }
INFO  06:57:04,337 - #8 if
INFO  06:57:04,337 - #24 (
INFO  06:57:04,337 - #19 ibool
INFO  06:57:04,337 - #25 )
INFO  06:57:04,338 - #8 if
INFO  06:57:04,338 - #24 (
INFO  06:57:04,338 - #19 i
INFO  06:57:04,339 - #39 ==
INFO  06:57:04,339 - #16 5
INFO  06:57:04,339 - #25 )
INFO  06:57:04,339 - #3 print
INFO  06:57:04,339 - #24 (
INFO  06:57:04,339 - #16 1
INFO  06:57:04,339 - #25 )
INFO  06:57:04,339 - #23 ;
INFO  06:57:04,339 - #19 a
INFO  06:57:04,339 - #21 =
INFO  06:57:04,339 - #16 2
INFO  06:57:04,339 - #23 ;
INFO  06:57:04,339 - #19 niz
INFO  06:57:04,339 - #21 =
INFO  06:57:04,339 - #13 new
INFO  06:57:04,339 - #19 int
INFO  06:57:04,339 - #28 [
INFO  06:57:04,340 - #16 3
INFO  06:57:04,340 - #29 ]
INFO  06:57:04,340 - #23 ;
INFO  06:57:04,340 - #19 niz
INFO  06:57:04,340 - #28 [
INFO  06:57:04,340 - #16 0
INFO  06:57:04,340 - #29 ]
INFO  06:57:04,340 - #21 =
INFO  06:57:04,340 - #16 1
INFO  06:57:04,341 - #32 *
INFO  06:57:04,341 - #19 a
INFO  06:57:04,358 - #23 ;
INFO  06:57:04,358 - #19 niz
INFO  06:57:04,359 - #28 [
INFO  06:57:04,359 - #16 1
INFO  06:57:04,359 - #29 ]
INFO  06:57:04,359 - #21 =
INFO  06:57:04,359 - #16 2
INFO  06:57:04,359 - #32 *
INFO  06:57:04,359 - #19 a
INFO  06:57:04,359 - #23 ;
INFO  06:57:04,359 - #19 niz
INFO  06:57:04,359 - #28 [
INFO  06:57:04,359 - #16 2
INFO  06:57:04,360 - #29 ]
INFO  06:57:04,360 - #21 =
INFO  06:57:04,360 - #19 sum
INFO  06:57:04,360 - #24 (
INFO  06:57:04,360 - #19 niz
INFO  06:57:04,360 - #28 [
INFO  06:57:04,360 - #16 1
INFO  06:57:04,360 - #29 ]
INFO  06:57:04,360 - #22 ,
INFO  06:57:04,360 - #19 niz
INFO  06:57:04,360 - #28 [
INFO  06:57:04,360 - #16 0
INFO  06:57:04,360 - #29 ]
INFO  06:57:04,361 - #25 )
INFO  06:57:04,361 - #32 *
INFO  06:57:04,361 - #19 a
INFO  06:57:04,361 - #20 +
INFO  06:57:04,361 - #16 1
INFO  06:57:04,361 - #23 ;
INFO  06:57:04,361 - #3 print
INFO  06:57:04,361 - #24 (
INFO  06:57:04,361 - #19 eol
INFO  06:57:04,361 - #25 )
INFO  06:57:04,361 - #23 ;
INFO  06:57:04,362 - #19 i
INFO  06:57:04,362 - #21 =
INFO  06:57:04,362 - #16 0
INFO  06:57:04,362 - #23 ;
INFO  06:57:04,362 - #7 while
INFO  06:57:04,362 - #24 (
INFO  06:57:04,362 - #19 i
INFO  06:57:04,362 - #35 <
INFO  06:57:04,362 - #16 10
INFO  06:57:04,362 - #25 )
INFO  06:57:04,363 - #26 {
INFO  06:57:04,363 - #8 if
INFO  06:57:04,363 - #24 (
INFO  06:57:04,363 - #19 i
INFO  06:57:04,364 - #39 ==
INFO  06:57:04,364 - #16 3
INFO  06:57:04,364 - #25 )
INFO  06:57:04,364 - #26 {
INFO  06:57:04,364 - #19 i
INFO  06:57:04,364 - #44 ++
INFO  06:57:04,364 - #23 ;
INFO  06:57:04,364 - #11 continue
INFO  06:57:04,364 - #23 ;
INFO  06:57:04,364 - #27 }
INFO  06:57:04,378 - #8 if
INFO  06:57:04,379 - #24 (
INFO  06:57:04,379 - #19 i
INFO  06:57:04,379 - #39 ==
INFO  06:57:04,379 - #16 4
INFO  06:57:04,379 - #25 )
INFO  06:57:04,379 - #12 break
INFO  06:57:04,379 - #23 ;
INFO  06:57:04,379 - #19 i
INFO  06:57:04,389 - #21 =
INFO  06:57:04,389 - #19 inkrement
INFO  06:57:04,390 - #24 (
INFO  06:57:04,390 - #19 i
INFO  06:57:04,390 - #22 ,
INFO  06:57:04,390 - #16 1
INFO  06:57:04,390 - #25 )
INFO  06:57:04,390 - #23 ;
INFO  06:57:04,390 - #27 }
INFO  06:57:04,390 - #8 if
INFO  06:57:04,390 - #24 (
INFO  06:57:04,390 - #19 i
INFO  06:57:04,390 - #39 ==
INFO  06:57:04,390 - #16 3
INFO  06:57:04,390 - #42 &&
INFO  06:57:04,390 - #19 verify
INFO  06:57:04,391 - #24 (
INFO  06:57:04,391 - #25 )
INFO  06:57:04,401 - #25 )
INFO  06:57:04,402 - #3 print
INFO  06:57:04,402 - #24 (
INFO  06:57:04,402 - #33 -
INFO  06:57:04,402 - #16 4
INFO  06:57:04,402 - #25 )
INFO  06:57:04,402 - #23 ;
INFO  06:57:04,402 - #9 else
ERROR 06:57:04,402 - 
Sintaksna greska na liniji 74
ERROR 06:57:04,402 - Fatalna greska, parsiranje se ne moze nastaviti na liniji 74
